Index: trac/ticket/api.py
===================================================================
--- trac/ticket/api.py	(revision 1976)
+++ trac/ticket/api.py	(working copy)
@@ -25,6 +25,7 @@
 from trac.core import *
 from trac.perm import IPermissionRequestor
 from trac.wiki import IWikiSyntaxProvider
+from trac.scripts.admin import IAdminConsoleProvider
 
 class MyLinkResolver(Component):
     """
@@ -35,7 +36,7 @@
 
 
 class TicketSystem(Component):
-    implements(IPermissionRequestor, IWikiSyntaxProvider)
+    implements(IPermissionRequestor, IWikiSyntaxProvider, IAdminConsoleProvider)
 
     # Public API
 
@@ -168,4 +169,270 @@
             return '<a class="missing ticket" href="%s" rel="nofollow">%s</a>' \
                    % (formatter.href.ticket(target), label)
 
-    
+    # IAdminConsoleProvider methods
+
+    def get_console_commands(self, tracadm):
+        self.tracadm = tracadm
+        from trac.ticket.model import Type, Priority, Severity
+        self._enum_map = {'ticket_type': Type, 'priority': Priority,
+            'severity': Severity }
+
+        yield ('ticket_type', self._help_ticket_type, self.do_ticket_type, self.complete_ticket_type)
+        yield ('severity', self._help_severity, self.do_severity, self.complete_severity)
+        yield ('priority', self._help_priority, self.do_priority, self.complete_priority)
+        yield ('component', self._help_component, self.do_component, self.complete_component)
+        yield ('version', [('version list', 'Show versions'),
+                           ('version add <name> [time]', 'Add version'),
+                           ('version rename <name> <newname>',
+                            'Rename version'),
+                           ('version time <name> <time>',
+                            'Set version date (Format: "%s" or "now")'
+                            % tracadm._date_format_hint),
+                       ('version remove <name>', 'Remove version')],
+                self.do_version, self.complete_version)
+
+
+
+    ## (Ticket) Type
+    _help_ticket_type = [('ticket_type list', 'Show possible ticket types'),
+                         ('ticket_type add <value>', 'Add a ticket type'),
+                         ('ticket_type change <value> <newvalue>',
+                          'Change a ticket type'),
+                         ('ticket_type remove <value>', 'Remove a ticket type')]
+
+    def complete_ticket_type (self, text, line, begidx, endidx):
+        if begidx == 16:
+            comp = self.get_enum_list ('ticket_type')
+        elif begidx < 15:
+            comp = ['list', 'add', 'change', 'remove']
+        return self.tracadm.word_complete(text, comp)
+
+    def do_ticket_type(self, line):
+        self._do_enum('ticket_type', line)
+
+    ## (Ticket) Priority
+    _help_priority = [('priority list', 'Show possible ticket priorities'),
+                       ('priority add <value>', 'Add a priority value option'),
+                       ('priority change <value> <newvalue>',
+                        'Change a priority value'),
+                       ('priority remove <value>', 'Remove priority value')]
+
+    def complete_priority (self, text, line, begidx, endidx):
+        if begidx == 16:
+            comp = self.get_enum_list ('priority')
+        elif begidx < 15:
+            comp = ['list', 'add', 'change', 'remove']
+        return self.tracadm.word_complete(text, comp)
+
+    def do_priority(self, line):
+        self._do_enum('priority', line)
+
+    ## (Ticket) Severity
+    _help_severity = [('severity list', 'Show possible ticket severities'),
+                      ('severity add <value>', 'Add a severity value option'),
+                      ('severity change <value> <newvalue>',
+                       'Change a severity value'),
+                      ('severity remove <value>', 'Remove severity value')]
+
+    def complete_severity (self, text, line, begidx, endidx):
+        if begidx == 16:
+            comp = self.get_enum_list ('severity')
+        elif begidx < 15:
+            comp = ['list', 'add', 'change', 'remove']
+        return self.tracadm.word_complete(text, comp)
+
+    def do_severity(self, line):
+        self._do_enum('severity', line)
+
+    # Type, priority, severity share the same datastructure and methods:
+
+    def _do_enum(self, type, line):
+        arg = self.tracadm.arg_tokenize(line)
+        try:
+            if arg[0]  == 'list':
+                self._do_enum_list(type)
+            elif arg[0] == 'add' and len(arg)==2:
+                name = arg[1]
+                self._do_enum_add(type, name)
+            elif arg[0] == 'change'  and len(arg)==3:
+                name = arg[1]
+                newname = arg[2]
+                self._do_enum_change(type, name, newname)
+            elif arg[0] == 'remove'  and len(arg)==2:
+                name = arg[1]
+                self._do_enum_remove(type, name)
+            else:
+                self.tracadm.do_help (type)
+        except Exception, e:
+            print 'Command %s failed:' % arg[0], e
+
+    def _do_enum_list(self, type):
+        enum_cls = self._enum_map[type]
+        self.tracadm.print_listing(['Possible Values'],
+                           [(e.name,) for e in enum_cls.select(self.tracadm.env_open())])
+
+    def _do_enum_add(self, type, name):
+        sql = ("INSERT INTO enum(value,type,name) "
+               " SELECT 1+COALESCE(max(value),0),'%(type)s','%(name)s'"
+               "   FROM enum WHERE type='%(type)s'"
+               % {'type':type, 'name':name})
+        self.tracadm.db_update(sql)
+
+    def _do_enum_change(self, type, name, newname):
+        enum_cls = self._enum_map[type]
+        enum = enum_cls(self.tracadm.env_open(), name)
+        enum.name = newname
+        enum.update()
+
+    def _do_enum_remove(self, type, name):
+        enum_cls = self._enum_map[type]
+        enum = enum_cls(self.tracadm.env_open(), name)
+        enum.delete()
+
+    def get_enum_list(self, type):
+        rows = self.tracadm.db_query("SELECT name FROM enum WHERE type='%s'" % type)
+        return [row[0] for row in rows]
+
+    # Component
+    _help_component = [('component list', 'Show available components'),
+                       ('component add <name> <owner>', 'Add a new component'),
+                       ('component rename <name> <newname>',
+                        'Rename a component'),
+                       ('component remove <name>',
+                        'Remove/uninstall component'),
+                       ('component chown <name> <owner>',
+                        'Change component ownership')]
+
+    def complete_component(self, text, line, begidx, endidx):
+        if begidx in (16, 17):
+            comp = self.get_component_list()
+        elif begidx > 15 and line.startswith('component chown '):
+            comp = self.get_user_list()
+        else:
+            comp = ['list', 'add', 'rename', 'remove', 'chown']
+        return self.tracadm.word_complete(text, comp)
+
+    def do_component(self, line):
+        arg = self.tracadm.arg_tokenize(line)
+        try:
+            if arg[0]  == 'list':
+                self._do_component_list()
+            elif arg[0] == 'add' and len(arg)==3:
+                name = arg[1]
+                owner = arg[2]
+                self._do_component_add(name, owner)
+            elif arg[0] == 'rename' and len(arg)==3:
+                name = arg[1]
+                newname = arg[2]
+                self._do_component_rename(name, newname)
+            elif arg[0] == 'remove'  and len(arg)==2:
+                name = arg[1]
+                self._do_component_remove(name)
+            elif arg[0] == 'chown' and len(arg)==3:
+                name = arg[1]
+                owner = arg[2]
+                self._do_component_set_owner(name, owner)
+            else:
+                self.tracadm.do_help ('component')
+        except Exception, e:
+            print 'Component %s failed:' % arg[0], e
+
+    def _do_component_list(self):
+        from trac.ticket.model import Component
+        data = []
+        for c in Component.select(self.tracadm.env_open()):
+            data.append((c.name, c.owner))
+        self.tracadm.print_listing(['Name', 'Owner'], data)
+
+    def _do_component_add(self, name, owner):
+        from trac.ticket.model import Component
+        component = Component(self.tracadm.env_open())
+        component.name = name
+        component.owner = owner
+        component.insert()
+
+    def _do_component_rename(self, name, newname):
+        from trac.ticket.model import Component
+        component = Component(self.tracadm.env_open(), name)
+        component.name = newname
+        component.update()
+
+    def _do_component_remove(self, name):
+        from trac.ticket.model import Component
+        component = Component(self.tracadm.env_open(), name)
+        component.delete()
+
+    def _do_component_set_owner(self, name, owner):
+        from trac.ticket.model import Component
+        component = Component(self.tracadm.env_open(), name)
+        component.owner = owner
+        component.update()
+
+    def get_user_list(self):
+        rows = self.tracadm.db_query("SELECT DISTINCT username FROM permission")
+        return [row[0] for row in rows]
+
+    def get_component_list(self):
+        rows = self.tracadm.db_query("SELECT name FROM component")
+        return [row[0] for row in rows]
+
+    def complete_version (self, text, line, begidx, endidx):
+        if begidx in (13, 15):
+            comp = self.get_version_list()
+        elif begidx < 13:
+            comp = ['list', 'add', 'rename', 'time', 'remove']
+        return self.tracadm.word_complete(text, comp)
+
+    def do_version(self, line):
+        arg = self.tracadm.arg_tokenize(line)
+        try:
+            if arg[0]  == 'list':
+                self._do_version_list()
+            elif arg[0] == 'add' and len(arg) in [2,3]:
+                self._do_version_add(arg[1])
+                if len(arg) == 3:
+                    self._do_version_time(arg[1], arg[2])
+            elif arg[0] == 'rename' and len(arg) == 3:
+                self._do_version_rename(arg[1], arg[2])
+            elif arg[0] == 'time' and len(arg) == 3:
+                self._do_version_time(arg[1], arg[2])
+            elif arg[0] == 'remove' and len(arg) == 2:
+                self._do_version_remove(arg[1])
+            else:
+                self.tracadm.do_help('version')
+        except Exception, e:
+            print 'Command %s failed:' % arg[0], e
+
+    def _do_version_list(self):
+        from trac.ticket.model import Version
+        data = []
+        for v in Version.select(self.tracadm.env_open()):
+            data.append((v.name, v.time and self.tracadm._format_date(v.time)))
+        self.tracadm.print_listing(['Name', 'Time'], data)
+
+    def _do_version_rename(self, name, newname):
+        from trac.ticket.model import Version
+        version = Version(self.tracadm.env_open(), name)
+        version.name = newname
+        version.update()
+
+    def _do_version_add(self, name):
+        from trac.ticket.model import Version
+        version = Version(self.tracadm.env_open())
+        version.name = name
+        version.insert()
+
+    def _do_version_remove(self, name):
+        from trac.ticket.model import Version
+        version = Version(self.tracadm.env_open(), name)
+        version.delete()
+
+    def _do_version_time(self, name, t):
+        from trac.ticket.model import Version
+        version = Version(self.tracadm.env_open(), name)
+        version.time = self.tracadm._parse_date(t)
+        version.update()
+
+    def get_version_list(self):
+        rows = self.db_query("SELECT name FROM version")
+        return [row[0] for row in rows]
Index: trac/Milestone.py
===================================================================
--- trac/Milestone.py	(revision 1976)
+++ trac/Milestone.py	(working copy)
@@ -30,8 +30,8 @@
 from trac.web.chrome import add_link, add_stylesheet, INavigationContributor
 from trac.web.main import IRequestHandler
 from trac.wiki import wiki_to_html, wiki_to_oneliner, IWikiSyntaxProvider
+from trac.scripts.admin import IAdminConsoleProvider
 
-
 class Milestone(object):
 
     def __init__(self, env, name=None, db=None):
@@ -252,7 +252,7 @@
 class MilestoneModule(Component):
 
     implements(INavigationContributor, IPermissionRequestor, IRequestHandler,
-               ITimelineEventProvider, IWikiSyntaxProvider)
+               ITimelineEventProvider, IWikiSyntaxProvider, IAdminConsoleProvider)
 
     # INavigationContributor methods
 
@@ -465,3 +465,85 @@
     def _format_link(self, formatter, ns, name, label):
         return '<a class="milestone" href="%s">%s</a>' \
                % (formatter.href.milestone(name), label)
+
+    # IAdminConsoleProvider methods
+    def get_console_commands(self, tracadm):
+        self.tracadm = tracadm
+        yield ('milestone', [('milestone list', 'Show milestones'),
+                            ('milestone add <name> [due]', 'Add milestone'),
+                            ('milestone rename <name> <newname>',
+                             'Rename milestone'),
+                            ('milestone due <name> <due>',
+                             'Set milestone due date (Format: "%s" or "now")'
+                             % tracadm._date_format_hint),
+                            ('milestone completed <name> <completed>',
+                             'Set milestone completed date (Format: "%s" or "now")'
+                             % tracadm._date_format_hint),
+                            ('milestone remove <name>', 'Remove milestone')],
+            self.do_milestone, self.complete_milestone)
+
+
+    def complete_milestone (self, text, line, begidx, endidx):
+        if begidx in (15, 17):
+            comp = self.get_milestone_list()
+        elif begidx < 15:
+            comp = ['list', 'add', 'rename', 'time', 'remove']
+        return self.tracadm.word_complete(text, comp)
+
+    def do_milestone(self, line):
+        arg = self.tracadm.arg_tokenize(line)
+        try:
+            if arg[0]  == 'list':
+                self._do_milestone_list()
+            elif arg[0] == 'add' and len(arg) in [2,3]:
+                self._do_milestone_add(arg[1])
+                if len(arg) == 3:
+                    self._do_milestone_set_due(arg[1], arg[2])
+            elif arg[0] == 'rename' and len(arg) == 3:
+                self._do_milestone_rename(arg[1], arg[2])
+            elif arg[0] == 'remove' and len(arg) == 2:
+                self._do_milestone_remove(arg[1])
+            elif arg[0] == 'due' and len(arg) == 3:
+                self._do_milestone_set_due(arg[1], arg[2])
+            elif arg[0] == 'completed' and len(arg) == 3:
+                self._do_milestone_set_completed(arg[1], arg[2])
+            else:
+                self.tracadm.do_help('milestone')
+        except Exception, e:
+            print 'Command %s failed:' % arg[0], e
+
+    def _do_milestone_list(self):
+        data = []
+        for m in Milestone.select(self.tracadm.env_open()):
+            data.append((m.name, m.due and self.tracadm._format_date(m.due),
+                         m.completed and self.tracadm._format_datetime(m.completed)))
+
+        self.tracadm.print_listing(['Name', 'Due', 'Completed'], data)
+
+    def _do_milestone_rename(self, name, newname):
+        milestone = Milestone(self.tracadm.env_open(), name)
+        milestone.name = newname
+        milestone.update()
+
+    def _do_milestone_add(self, name):
+        milestone = Milestone(self.tracadm.env_open())
+        milestone.name = name
+        milestone.insert()
+
+    def _do_milestone_remove(self, name):
+        milestone = Milestone(self.tracadm.env_open(), name)
+        milestone.delete()
+
+    def _do_milestone_set_due(self, name, t):
+        milestone = Milestone(self.tracadm.env_open(), name)
+        milestone.due = self.tracadm._parse_date(t)
+        milestone.update()
+
+    def _do_milestone_set_completed(self, name, t):
+        milestone = Milestone(self.tracadm.env_open(), name)
+        milestone.completed = self.tracadm._parse_date(t)
+        milestone.update()
+
+    def get_milestone_list(self):
+        rows = self.tracadm.db_query("SELECT name FROM milestone")
+        return [row[0] for row in rows]
Index: trac/scripts/admin.py
===================================================================
--- trac/scripts/admin.py	(revision 1976)
+++ trac/scripts/admin.py	(working copy)
@@ -33,13 +33,14 @@
 import urllib
 
 import trac
-from trac import perm, util
+from trac import util
 from trac.config import default_dir
 from trac.env import Environment
-from trac.Milestone import Milestone
-from trac.perm import PermissionSystem
-from trac.ticket.model import *
+from trac.core import ComponentManager, ExtensionPoint, Interface
+from trac.loader import load_components
 
+__all__ = [ 'IAdminConsoleProvider' ]
+
 try:
     sum
 except NameError:
@@ -50,7 +51,38 @@
             tot += item
         return tot
 
+class IAdminConsoleProvider(Interface):
+    """
+    Extension point interface for components to provide an administrative
+    interface from within trac-admin.
+    """
 
+    def get_console_commands(tracadm):
+        """
+        Return an iterable of (name, help, callable, completer) tuples.
+
+        tracadm is a TracAdmin instance.
+
+        completer can be null. help is in the same format that trac-admin
+        uses.
+        """
+
+class AdminCommands(trac.core.Component):
+    """
+    Component end-point for IAdminConsoleProvider extensions
+    """
+    admin_providers = ExtensionPoint(IAdminConsoleProvider)
+
+    def import_providers(self, env, tracadm):
+        load_components(env)
+        for provider in self.admin_providers:
+            for command in provider.get_console_commands(tracadm):
+                name, help, callback, completer = command
+                setattr(tracadm.__class__, 'do_' + name, callback)
+                setattr(tracadm.__class__, '_help_' + name, help)
+                if completer:
+                    setattr(tracadm.__class__, 'complete_' + name, completer)
+
 class TracAdmin(cmd.Cmd):
     intro = ''
     license = trac.__license_long__
@@ -64,6 +96,7 @@
     _date_format = '%Y-%m-%d'
     _datetime_format = '%Y-%m-%d %H:%M:%S'
     _date_format_hint = 'YYYY-MM-DD'
+    _admin_commands = None
 
     def __init__(self, envdir=None):
         cmd.Cmd.__init__(self)
@@ -72,6 +105,7 @@
             self.env_set(os.path.abspath(envdir))
 
     def docmd(self, cmd='help'):
+        self.env_check()
         self.onecmd(cmd)
 
     def emptyline(self):
@@ -84,6 +118,7 @@
               '%(copy)s\n\n'                                    \
               "Type:  '?' or 'help' for help on commands.\n" %  \
               {'ver':trac.__version__,'copy':__copyright__}
+        self.env_check()
         self.cmdloop()
 
     ##
@@ -99,13 +134,21 @@
     def env_check(self):
         try:
             self.__env = Environment(self.envname)
-        except:
+            try:
+                self._admin_commands = AdminCommands(self.__env)
+                self._admin_commands.import_providers(self.__env, self)
+            except Exception, e:
+                print "Failed to initialise extension points.", e
+                raise
+        except Exception, e:
             return 0
         return 1
 
     def env_create(self, db_str):
         try:
             self.__env = Environment(self.envname, create=True, db_str=db_str)
+            self._admin_commands = AdminCommands(self.__env)
+            self._admin_commands.import_providers(self.__env, self)
             return self.__env
         except Exception, e:
             print 'Failed to create environment.', e
@@ -117,6 +160,8 @@
         try:
             if not self.__env:
                 self.__env = Environment(self.envname)
+                self._admin_commands = AdminCommands(self.__env)
+                self._admin_commands.import_providers(self.__env, self)
             return self.__env
         except Exception, e:
             print 'Failed to open environment.', e
@@ -209,6 +254,8 @@
                                xrange(0, (1 + len(sep)) * cnum + sum(colw))])
         print
 
+
+
     def print_doc(self, doc, decor=False):
         if not doc: return
         self.print_listing(['Command', 'Description'], doc, '  --', decor) 
@@ -217,14 +264,6 @@
         rows = self.db_query("SELECT name FROM component")
         return [row[0] for row in rows]
 
-    def get_user_list(self):
-        rows = self.db_query("SELECT DISTINCT username FROM permission")
-        return [row[0] for row in rows]
-
-    def get_wiki_list(self):
-        rows = self.db_query('SELECT DISTINCT name FROM wiki') 
-        return [row[0] for row in rows]
-
     def get_dir_list(self, pathstr, justdirs=False):
         dname = os.path.dirname(pathstr)
         d = os.path.join(os.getcwd(), dname)
@@ -241,14 +280,7 @@
             result = dlist
         return result
 
-    def get_enum_list(self, type):
-        rows = self.db_query("SELECT name FROM enum WHERE type='%s'" % type)
-        return [row[0] for row in rows]
 
-    def get_milestone_list(self):
-        rows = self.db_query("SELECT name FROM milestone")
-        return [row[0] for row in rows]
-
     def get_version_list(self):
         rows = self.db_query("SELECT name FROM version")
         return [row[0] for row in rows]
@@ -299,15 +331,13 @@
             except AttributeError:
                 print "No documentation found for '%s'" % arg[0]
         else:
-            docs = (self._help_about + self._help_help +
-                    self._help_initenv + self._help_hotcopy +
-                    self._help_resync + self._help_upgrade +
-                    self._help_wiki +
-#                    self._help_config + self._help_wiki +
-                    self._help_permission + self._help_component +
-                    self._help_ticket_type + self._help_priority +
-                    self._help_severity +  self._help_version +
-                    self._help_milestone)
+            # Extract documentation from all _help_* members
+            docs = []
+            doc_strings = [doc for doc in dir(self) if doc.startswith('_help_') and doc[6:] not in ('EOF', 'exit', 'quit')]
+            for doc in doc_strings:
+                docs.extend(getattr(self, doc))
+            docs.sort(lambda a, b: cmp(a[0], b[0]))
+
             print 'trac-admin - The Trac Administration Console %s' % trac.__version__
             if not self.interactive:
                 print
@@ -342,153 +372,6 @@
     do_EOF = do_quit # Alias
 
 
-    # Component
-    _help_component = [('component list', 'Show available components'),
-                       ('component add <name> <owner>', 'Add a new component'),
-                       ('component rename <name> <newname>',
-                        'Rename a component'),
-                       ('component remove <name>',
-                        'Remove/uninstall component'),
-                       ('component chown <name> <owner>',
-                        'Change component ownership')]
-
-    def complete_component(self, text, line, begidx, endidx):
-        if begidx in (16, 17):
-            comp = self.get_component_list()
-        elif begidx > 15 and line.startswith('component chown '):
-            comp = self.get_user_list()
-        else:
-            comp = ['list', 'add', 'rename', 'remove', 'chown']
-        return self.word_complete(text, comp)
-
-    def do_component(self, line):
-        arg = self.arg_tokenize(line)
-        try:
-            if arg[0]  == 'list':
-                self._do_component_list()
-            elif arg[0] == 'add' and len(arg)==3:
-                name = arg[1]
-                owner = arg[2]
-                self._do_component_add(name, owner)
-            elif arg[0] == 'rename' and len(arg)==3:
-                name = arg[1]
-                newname = arg[2]
-                self._do_component_rename(name, newname)
-            elif arg[0] == 'remove'  and len(arg)==2:
-                name = arg[1]
-                self._do_component_remove(name)
-            elif arg[0] == 'chown' and len(arg)==3:
-                name = arg[1]
-                owner = arg[2]
-                self._do_component_set_owner(name, owner)
-            else:    
-                self.do_help ('component')
-        except Exception, e:
-            print 'Component %s failed:' % arg[0], e
-
-    def _do_component_list(self):
-        data = []
-        for c in Component.select(self.env_open()):
-            data.append((c.name, c.owner))
-        self.print_listing(['Name', 'Owner'], data)
-
-    def _do_component_add(self, name, owner):
-        component = Component(self.env_open())
-        component.name = name
-        component.owner = owner
-        component.insert()
-
-    def _do_component_rename(self, name, newname):
-        component = Component(self.env_open(), name)
-        component.name = newname
-        component.update()
-
-    def _do_component_remove(self, name):
-        component = Component(self.env_open(), name)
-        component.delete()
-
-    def _do_component_set_owner(self, name, owner):
-        component = Component(self.env_open(), name)
-        component.owner = owner
-        component.update()
-
-
-    ## Permission
-    _help_permission = [('permission list [user]', 'List permission rules'),
-                        ('permission add <user> <action> [action] [...]',
-                         'Add a new permission rule'),
-                        ('permission remove <user> <action> [action] [...]',
-                         'Remove permission rule')]
-
-    def complete_permission(self, text, line, begidx, endidx):
-        argv = self.arg_tokenize(line)
-        argc = len(argv)
-        if line[-1] == ' ': # Space starts new argument
-            argc += 1
-        if argc == 2:
-            comp = ['list', 'add', 'remove']
-        elif argc >= 4:
-            comp = perm.permissions + perm.meta_permissions.keys()
-            comp.sort()
-        return self.word_complete(text, comp)
-
-    def do_permission(self, line):
-        arg = self.arg_tokenize(line)
-        try:
-            if arg[0]  == 'list':
-                user = None
-                if len(arg) > 1:
-                    user = arg[1]
-                self._do_permission_list(user)
-            elif arg[0] == 'add' and len(arg) >= 3:
-                user = arg[1]
-                for action in arg[2:]:
-                    self._do_permission_add(user, action)
-            elif arg[0] == 'remove'  and len(arg) >= 3:
-                user = arg[1]
-                for action in arg[2:]:
-                    self._do_permission_remove(user, action)
-            else:
-                self.do_help('permission')
-        except Exception, e:
-            print 'Permission %s failed:' % arg[0], e
-
-    def _do_permission_list(self, user=None):
-        if user:
-            rows = self.db_query("SELECT username, action FROM permission "
-                                 "WHERE username='%s' ORDER BY action" % user)
-        else:
-            rows = self.db_query("SELECT username, action FROM permission "
-                                 "ORDER BY username, action")
-        self.print_listing(['User', 'Action'], rows)
-        print
-        print 'Available actions:'
-        actions = PermissionSystem(self.env_open()).get_actions()
-        actions.sort()
-        text = ', '.join(actions)
-        print util.wrap(text, initial_indent=' ', subsequent_indent=' ',
-                        linesep='\n')
-        print
-
-    def _do_permission_add(self, user, action):
-        if not action.islower() and not action.isupper():
-            print 'Group names must be in lower case and actions in upper case'
-            return
-        self.db_update("INSERT INTO permission VALUES('%s', '%s')"
-                       % (user, action))
-
-    def _do_permission_remove(self, user, action):
-        sql = "DELETE FROM permission"
-        clauses = []
-        if action != '*':
-            clauses.append("action='%s'" % action)
-        if user != '*':
-            clauses.append("username='%s'" % user)
-        if clauses:
-            sql += " WHERE " + " AND ".join(clauses)
-        self.db_update(sql)
-
-
     ## Initenv
     _help_initenv = [('initenv',
                       'Create and initialize a new environment interactively'),
@@ -589,7 +472,7 @@
             print ' Installing default wiki pages'
             cnx = self.__env.get_db_cnx()
             cursor = cnx.cursor()
-            self._do_wiki_load(default_dir('wiki'), cursor)
+            self.do_wiki('load ' + default_dir('wiki'))
             cnx.commit()
 
             print ' Indexing repository'
@@ -650,380 +533,6 @@
             
         print 'done.'
 
-
-    ## Wiki
-    _help_wiki = [('wiki list', 'List wiki pages'),
-                  ('wiki remove <name>', 'Remove wiki page'),
-                  ('wiki export <page> [file]',
-                   'Export wiki page to file or stdout'),
-                  ('wiki import <page> [file]',
-                   'Import wiki page from file or stdin'),
-                  ('wiki dump <directory>',
-                   'Export all wiki pages to files named by title'),
-                  ('wiki load <directory>',
-                   'Import all wiki pages from directory'),
-                  ('wiki upgrade',
-                   'Upgrade default wiki pages to current version')]
-
-    def complete_wiki(self, text, line, begidx, endidx):
-        argv = self.arg_tokenize(line)
-        argc = len(argv)
-        if line[-1] == ' ': # Space starts new argument
-            argc += 1
-        if argc == 2:
-            comp = ['list', 'remove', 'import', 'export', 'dump', 'load',
-                    'upgrade']
-        else:
-            if argv[1] in ('dump', 'load'):
-                comp = self.get_dir_list(argv[-1], 1)
-            elif argv[1] in ('export', 'import'):
-                if argc == 3:
-                    comp = self.get_wiki_list()
-                elif argc == 4:
-                    comp = self.get_dir_list(argv[-1])
-        return self.word_complete(text, comp)
-
-    def do_wiki(self, line):
-        arg = self.arg_tokenize(line)
-        try:
-            if arg[0]  == 'list':
-                self._do_wiki_list()
-            elif arg[0] == 'remove'  and len(arg)==2:
-                name = arg[1]
-                self._do_wiki_remove(name)
-            elif arg[0] == 'import' and len(arg) == 3:
-                title = arg[1]
-                file = arg[2]
-                self._do_wiki_import(file, title)
-            elif arg[0] == 'export'  and len(arg) in [2,3]:
-                page = arg[1]
-                file = (len(arg) == 3 and arg[2]) or None
-                self._do_wiki_export(page, file)
-            elif arg[0] == 'dump' and len(arg) in [1,2]:
-                dir = (len(arg) == 2 and arg[1]) or ''
-                self._do_wiki_dump(dir)
-            elif arg[0] == 'load' and len(arg) in [1,2]:
-                dir = (len(arg) == 2 and arg[1]) or ''
-                self._do_wiki_load(dir)
-            elif arg[0] == 'upgrade' and len(arg) == 1:
-                self._do_wiki_load(default_dir('wiki'),
-                                   ignore=['WikiStart', 'checkwiki.py'])
-            else:    
-                self.do_help ('wiki')
-        except Exception, e:
-            print 'Wiki %s failed:' % arg[0], e
-
-    def _do_wiki_list(self):
-        rows = self.db_query("SELECT name,max(version),time "
-                             "FROM wiki GROUP BY name ORDER BY name")
-        self.print_listing(['Title', 'Edits', 'Modified'],
-                           [(r[0], r[1], self._format_datetime(r[2])) for r in rows])
-
-    def _do_wiki_remove(self, name):
-        cnx = self.db_open()
-        cursor = cnx.cursor()
-        cursor.execute('SELECT name FROM wiki WHERE name=%s', name)
-        if not cursor.fetchone():
-            raise Exception("No such wiki page '%s'" % name)
-        cursor.execute("DELETE FROM wiki WHERE name=%s", (name,))
-
-    def _do_wiki_import(self, filename, title, cursor=None):
-        if not os.path.isfile(filename):
-            print "%s is not a file" % filename
-            return
-        f = open(filename,'r')
-        data = util.to_utf8(f.read())
-
-        # Make sure we don't insert the exact same page twice
-        rows = self.db_query("SELECT text FROM wiki WHERE name='%s' "
-                             "ORDER BY version DESC LIMIT 1" % title, cursor)
-        old = list(rows)
-        if old and data == old[0][0]:
-            print '  %s already up to date.' % title
-            return
-
-        data = data.replace("'", "''") # Escape ' for safe SQL
-        f.close()
-
-        sql = ("INSERT INTO wiki(version,name,time,author,ipnr,text) "
-               " SELECT 1+COALESCE(max(version),0),'%(title)s','%(time)s',"
-               " '%(author)s','%(ipnr)s','%(text)s' FROM wiki "
-               " WHERE name='%(title)s'" 
-               % {'title':title,
-                  'time':int(time.time()),
-                  'author':'trac',
-                  'ipnr':'127.0.0.1',
-                  'locked':'0',
-                  'text':data})
-        self.db_update(sql, cursor)
-
-    def _do_wiki_export(self, page, filename=''):
-        data = self.db_query("SELECT text FROM wiki WHERE name='%s' "
-                             "ORDER BY version DESC LIMIT 1" % page)
-        text = data.next()[0]
-        if not filename:
-            print text
-        else:
-            if os.path.isfile(filename):
-                raise Exception("File '%s' exists" % filename)
-            f = open(filename,'w')
-            f.write(text)
-            f.close()
-
-    def _do_wiki_dump(self, dir):
-        pages = self.get_wiki_list()
-        for p in pages:
-            dst = os.path.join(dir, urllib.quote(p, ''))
-            print " %s => %s" % (p, dst)
-            self._do_wiki_export(p, dst)
-
-    def _do_wiki_load(self, dir, cursor=None, ignore=[]):
-        for page in os.listdir(dir):
-            if page in ignore:
-                continue
-            filename = os.path.join(dir, page)
-            page = urllib.unquote(page)
-            if os.path.isfile(filename):
-                print " %s => %s" % (filename, page)
-                self._do_wiki_import(filename, page, cursor)
-
-
-    ## (Ticket) Type
-    _help_ticket_type = [('ticket_type list', 'Show possible ticket types'),
-                         ('ticket_type add <value>', 'Add a ticket type'),
-                         ('ticket_type change <value> <newvalue>',
-                          'Change a ticket type'),
-                         ('ticket_type remove <value>', 'Remove a ticket type')]
- 
-    def complete_ticket_type (self, text, line, begidx, endidx):
-        if begidx == 16:
-            comp = self.get_enum_list ('ticket_type')
-        elif begidx < 15:
-            comp = ['list', 'add', 'change', 'remove']
-        return self.word_complete(text, comp)
- 
-    def do_ticket_type(self, line):
-        self._do_enum('ticket_type', line)
- 
-    ## (Ticket) Priority
-    _help_priority = [('priority list', 'Show possible ticket priorities'),
-                       ('priority add <value>', 'Add a priority value option'),
-                       ('priority change <value> <newvalue>',
-                        'Change a priority value'),
-                       ('priority remove <value>', 'Remove priority value')]
-
-    def complete_priority (self, text, line, begidx, endidx):
-        if begidx == 16:
-            comp = self.get_enum_list ('priority')
-        elif begidx < 15:
-            comp = ['list', 'add', 'change', 'remove']
-        return self.word_complete(text, comp)
-
-    def do_priority(self, line):
-        self._do_enum('priority', line)
-
-    ## (Ticket) Severity
-    _help_severity = [('severity list', 'Show possible ticket severities'),
-                      ('severity add <value>', 'Add a severity value option'),
-                      ('severity change <value> <newvalue>',
-                       'Change a severity value'),
-                      ('severity remove <value>', 'Remove severity value')]
-
-    def complete_severity (self, text, line, begidx, endidx):
-        if begidx == 16:
-            comp = self.get_enum_list ('severity')
-        elif begidx < 15:
-            comp = ['list', 'add', 'change', 'remove']
-        return self.word_complete(text, comp)
-
-    def do_severity(self, line):
-        self._do_enum('severity', line)
-
-    # Type, priority, severity share the same datastructure and methods:
-
-    _enum_map = {'ticket_type': Type, 'priority': Priority,
-                 'severity': Severity}
-
-    def _do_enum(self, type, line):
-        arg = self.arg_tokenize(line)
-        try:
-            if arg[0]  == 'list':
-                self._do_enum_list(type)
-            elif arg[0] == 'add' and len(arg)==2:
-                name = arg[1]
-                self._do_enum_add(type, name)
-            elif arg[0] == 'change'  and len(arg)==3:
-                name = arg[1]
-                newname = arg[2]
-                self._do_enum_change(type, name, newname)
-            elif arg[0] == 'remove'  and len(arg)==2:
-                name = arg[1]
-                self._do_enum_remove(type, name)
-            else:    
-                self.do_help (type)
-        except Exception, e:
-            print 'Command %s failed:' % arg[0], e
-
-    def _do_enum_list(self, type):
-        enum_cls = self._enum_map[type]
-        self.print_listing(['Possible Values'],
-                           [(e.name,) for e in enum_cls.select(self.env_open())])
-
-    def _do_enum_add(self, type, name):
-        sql = ("INSERT INTO enum(value,type,name) "
-               " SELECT 1+COALESCE(max(value),0),'%(type)s','%(name)s'"
-               "   FROM enum WHERE type='%(type)s'" 
-               % {'type':type, 'name':name})
-        self.db_update(sql)
-
-    def _do_enum_change(self, type, name, newname):
-        enum_cls = self._enum_map[type]
-        enum = enum_cls(self.env_open(), name)
-        enum.name = newname
-        enum.update()
-
-    def _do_enum_remove(self, type, name):
-        enum_cls = self._enum_map[type]
-        enum = enum_cls(self.env_open(), name)
-        enum.delete()
-
-
-    ## Milestone
-    _help_milestone = [('milestone list', 'Show milestones'),
-                       ('milestone add <name> [due]', 'Add milestone'),
-                       ('milestone rename <name> <newname>',
-                        'Rename milestone'),
-                       ('milestone due <name> <due>',
-                        'Set milestone due date (Format: "%s" or "now")'
-                        % _date_format_hint),
-                       ('milestone completed <name> <completed>',
-                        'Set milestone completed date (Format: "%s" or "now")'
-                        % _date_format_hint),
-                       ('milestone remove <name>', 'Remove milestone')]
-
-    def complete_milestone (self, text, line, begidx, endidx):
-        if begidx in (15, 17):
-            comp = self.get_milestone_list()
-        elif begidx < 15:
-            comp = ['list', 'add', 'rename', 'time', 'remove']
-        return self.word_complete(text, comp)
-
-    def do_milestone(self, line):
-        arg = self.arg_tokenize(line)
-        try:
-            if arg[0]  == 'list':
-                self._do_milestone_list()
-            elif arg[0] == 'add' and len(arg) in [2,3]:
-                self._do_milestone_add(arg[1])
-                if len(arg) == 3:
-                    self._do_milestone_set_due(arg[1], arg[2])
-            elif arg[0] == 'rename' and len(arg) == 3:
-                self._do_milestone_rename(arg[1], arg[2])
-            elif arg[0] == 'remove' and len(arg) == 2:
-                self._do_milestone_remove(arg[1])
-            elif arg[0] == 'due' and len(arg) == 3:
-                self._do_milestone_set_due(arg[1], arg[2])
-            elif arg[0] == 'completed' and len(arg) == 3:
-                self._do_milestone_set_completed(arg[1], arg[2])
-            else:
-                self.do_help('milestone')
-        except Exception, e:
-            print 'Command %s failed:' % arg[0], e
-
-    def _do_milestone_list(self):
-        data = []
-        for m in Milestone.select(self.env_open()):
-            data.append((m.name, m.due and self._format_date(m.due),
-                         m.completed and self._format_datetime(m.completed)))
-
-        self.print_listing(['Name', 'Due', 'Completed'], data)
-
-    def _do_milestone_rename(self, name, newname):
-        milestone = Milestone(self.env_open(), name)
-        milestone.name = newname
-        milestone.update()
-
-    def _do_milestone_add(self, name):
-        milestone = Milestone(self.env_open())
-        milestone.name = name
-        milestone.insert()
-
-    def _do_milestone_remove(self, name):
-        milestone = Milestone(self.env_open(), name)
-        milestone.delete()
-
-    def _do_milestone_set_due(self, name, t):
-        milestone = Milestone(self.env_open(), name)
-        milestone.due = self._parse_date(t)
-        milestone.update()
-
-    def _do_milestone_set_completed(self, name, t):
-        milestone = Milestone(self.env_open(), name)
-        milestone.completed = self._parse_date(t)
-        milestone.update()
-
-    ## Version
-    _help_version = [('version list', 'Show versions'),
-                       ('version add <name> [time]', 'Add version'),
-                       ('version rename <name> <newname>',
-                        'Rename version'),
-                       ('version time <name> <time>',
-                        'Set version date (Format: "%s" or "now")'
-                        % _date_format_hint),
-                       ('version remove <name>', 'Remove version')]
-
-    def complete_version (self, text, line, begidx, endidx):
-        if begidx in (13, 15):
-            comp = self.get_version_list()
-        elif begidx < 13:
-            comp = ['list', 'add', 'rename', 'time', 'remove']
-        return self.word_complete(text, comp)
-
-    def do_version(self, line):
-        arg = self.arg_tokenize(line)
-        try:
-            if arg[0]  == 'list':
-                self._do_version_list()
-            elif arg[0] == 'add' and len(arg) in [2,3]:
-                self._do_version_add(arg[1])
-                if len(arg) == 3:
-                    self._do_version_time(arg[1], arg[2])
-            elif arg[0] == 'rename' and len(arg) == 3:
-                self._do_version_rename(arg[1], arg[2])
-            elif arg[0] == 'time' and len(arg) == 3:
-                self._do_version_time(arg[1], arg[2])
-            elif arg[0] == 'remove' and len(arg) == 2:
-                self._do_version_remove(arg[1])
-            else:
-                self.do_help('version')
-        except Exception, e:
-            print 'Command %s failed:' % arg[0], e
-
-    def _do_version_list(self):
-        data = []
-        for v in Version.select(self.env_open()):
-            data.append((v.name, v.time and self._format_date(v.time)))
-        self.print_listing(['Name', 'Time'], data)
-
-    def _do_version_rename(self, name, newname):
-        version = Version(self.env_open(), name)
-        version.name = newname
-        version.update()
-
-    def _do_version_add(self, name):
-        version = Version(self.env_open())
-        version.name = name
-        version.insert()
-
-    def _do_version_remove(self, name):
-        version = Version(self.env_open(), name)
-        version.delete()
-
-    def _do_version_time(self, name, t):
-        version = Version(self.env_open(), name)
-        version.time = self._parse_date(t)
-        version.update()
-
     _help_upgrade = [('upgrade', 'Upgrade database to current version')]
     def do_upgrade(self, line):
         arg = self.arg_tokenize(line)
Index: trac/scripts/tests/admin.py
===================================================================
--- trac/scripts/tests/admin.py	(revision 1976)
+++ trac/scripts/tests/admin.py	(working copy)
@@ -27,6 +27,7 @@
 from trac.scripts import admin
 from trac.test import InMemoryDatabase
 from trac.util import get_date_format_hint, NaivePopen
+from difflib import unified_diff
 
 import os
 import re
@@ -99,7 +100,6 @@
 class SkipTest(Exception):
     pass
 
-
 class TracadminTestCase(unittest.TestCase):
     """
     Tests the output of trac-admin and is meant to be used with
@@ -111,16 +111,29 @@
                                             '===== (test_[^ ]+) =====')
 
     def setUp(self):
+        from trac.ticket.api import TicketSystem
+        from trac.Milestone import Milestone
+        from trac.perm import IPermissionRequestor
+
         self.env = InMemoryEnvironment('', create=True)
         self.db = self.env.get_db_cnx()
 
         self._admin = admin.TracAdmin()
+
         self._admin.env_set('', self.env)
 
+        # Force load of component IAdminConsoleProviders
+        self._admin._admin_commands = admin.AdminCommands(self.env)
+        self._admin._admin_commands.import_providers(self.env, self._admin)
+
         # Set test date to 11th Jan 2004
         self._test_date = time.strftime('%Y-%m-%d',
                                         (2004, 1, 11, 0, 0, 0, 6, 1, -1))
 
+    def assertEquals(self, expected, result):
+        if expected != result:
+            raise AssertionError('\n' + '\n'.join(unified_diff(expected.split('\n'), result.split('\n'))))
+
     def tearDown(self):
         self.env = None
 
Index: trac/scripts/tests/admin-tests.txt
===================================================================
--- trac/scripts/tests/admin-tests.txt	(revision 1976)
+++ trac/scripts/tests/admin-tests.txt	(working copy)
@@ -6,50 +6,50 @@
 Invoking trac-admin without command starts interactive mode.
 
 about                                                  -- Shows information about trac-admin
+component add <name> <owner>                           -- Add a new component
+component chown <name> <owner>                         -- Change component ownership
+component list                                         -- Show available components
+component remove <name>                                -- Remove/uninstall component
+component rename <name> <newname>                      -- Rename a component
 help                                                   -- Show documentation
+hotcopy <backupdir>                                    -- Make a hot backup copy of an environment
 initenv                                                -- Create and initialize a new environment interactively
 initenv <projectname> <db> <repospath> <templatepath>  -- Create and initialize a new environment from arguments
-hotcopy <backupdir>                                    -- Make a hot backup copy of an environment
-resync                                                 -- Re-synchronize trac with the repository
-upgrade                                                -- Upgrade database to current version
-wiki list                                              -- List wiki pages
-wiki remove <name>                                     -- Remove wiki page
-wiki export <page> [file]                              -- Export wiki page to file or stdout
-wiki import <page> [file]                              -- Import wiki page from file or stdin
-wiki dump <directory>                                  -- Export all wiki pages to files named by title
-wiki load <directory>                                  -- Import all wiki pages from directory
-wiki upgrade                                           -- Upgrade default wiki pages to current version
+milestone add <name> [due]                             -- Add milestone
+milestone completed <name> <completed>                 -- Set milestone completed date (Format: "YYYY-MM-DD" or "now")
+milestone due <name> <due>                             -- Set milestone due date (Format: "YYYY-MM-DD" or "now")
+milestone list                                         -- Show milestones
+milestone remove <name>                                -- Remove milestone
+milestone rename <name> <newname>                      -- Rename milestone
+permission add <user> <action> [action] [...]          -- Add a new permission rule
 permission list [user]                                 -- List permission rules
-permission add <user> <action> [action] [...]          -- Add a new permission rule
 permission remove <user> <action> [action] [...]       -- Remove permission rule
-component list                                         -- Show available components
-component add <name> <owner>                           -- Add a new component
-component rename <name> <newname>                      -- Rename a component
-component remove <name>                                -- Remove/uninstall component
-component chown <name> <owner>                         -- Change component ownership
-ticket_type list                                       -- Show possible ticket types
-ticket_type add <value>                                -- Add a ticket type
-ticket_type change <value> <newvalue>                  -- Change a ticket type
-ticket_type remove <value>                             -- Remove a ticket type
-priority list                                          -- Show possible ticket priorities
 priority add <value>                                   -- Add a priority value option
 priority change <value> <newvalue>                     -- Change a priority value
+priority list                                          -- Show possible ticket priorities
 priority remove <value>                                -- Remove priority value
-severity list                                          -- Show possible ticket severities
+resync                                                 -- Re-synchronize trac with the repository
 severity add <value>                                   -- Add a severity value option
 severity change <value> <newvalue>                     -- Change a severity value
+severity list                                          -- Show possible ticket severities
 severity remove <value>                                -- Remove severity value
+ticket_type add <value>                                -- Add a ticket type
+ticket_type change <value> <newvalue>                  -- Change a ticket type
+ticket_type list                                       -- Show possible ticket types
+ticket_type remove <value>                             -- Remove a ticket type
+upgrade                                                -- Upgrade database to current version
+version add <name> [time]                              -- Add version
 version list                                           -- Show versions
-version add <name> [time]                              -- Add version
+version remove <name>                                  -- Remove version
 version rename <name> <newname>                        -- Rename version
 version time <name> <time>                             -- Set version date (Format: "YYYY-MM-DD" or "now")
-version remove <name>                                  -- Remove version
-milestone list                                         -- Show milestones
-milestone add <name> [due]                             -- Add milestone
-milestone rename <name> <newname>                      -- Rename milestone
-milestone due <name> <due>                             -- Set milestone due date (Format: "YYYY-MM-DD" or "now")
-milestone completed <name> <completed>                 -- Set milestone completed date (Format: "YYYY-MM-DD" or "now")
-milestone remove <name>                                -- Remove milestone
+wiki dump <directory>                                  -- Export all wiki pages to files named by title
+wiki export <page> [file]                              -- Export wiki page to file or stdout
+wiki import <page> [file]                              -- Import wiki page from file or stdin
+wiki list                                              -- List wiki pages
+wiki load <directory>                                  -- Import all wiki pages from directory
+wiki remove <name>                                     -- Remove wiki page
+wiki upgrade                                           -- Upgrade default wiki pages to current version
 
 Visit the Trac Project at http://trac.edgewall.com/
 
Index: trac/perm.py
===================================================================
--- trac/perm.py	(revision 1976)
+++ trac/perm.py	(working copy)
@@ -24,8 +24,9 @@
 """Management of permissions."""
 
 from trac.core import *
+from trac.scripts.admin import IAdminConsoleProvider
+from trac import util
 
-
 __all__ = ['IPermissionRequestor', 'IPermissionStore',
            'IPermissionGroupProvider', 'PermissionError', 'PermissionSystem']
 
@@ -80,7 +81,7 @@
 class PermissionSystem(Component):
     """Sub-system that manages user permissions."""
 
-    implements(IPermissionRequestor)
+    implements(IPermissionRequestor, IAdminConsoleProvider)
 
     requestors = ExtensionPoint(IPermissionRequestor)
     stores = ExtensionPoint(IPermissionStore)
@@ -165,6 +166,88 @@
                     actions.append(action)
         return [('TRAC_ADMIN', actions)]
 
+    # IAdminConsoleProvider methods
+
+    ## Permission
+    _help_permission = [('permission list [user]', 'List permission rules'),
+                        ('permission add <user> <action> [action] [...]',
+                         'Add a new permission rule'),
+                        ('permission remove <user> <action> [action] [...]',
+                         'Remove permission rule')]
+
+    def get_console_commands(self, tracadm):
+        self.tracadm = tracadm
+        yield ('permission', self._help_permission, self.do_permission, self.complete_permission)
+            
+    def complete_permission(self, text, line, begidx, endidx):
+        argv = self.tracadm.arg_tokenize(line)
+        argc = len(argv)
+        if line[-1] == ' ': # Space starts new argument
+            argc += 1
+        if argc == 2:
+            comp = ['list', 'add', 'remove']
+        elif argc >= 4:
+            comp = perm.permissions + perm.meta_permissions.keys()
+            comp.sort()
+        return self.tracadm.word_complete(text, comp)
+        
+    def do_permission(self, line):
+        arg = self.tracadm.arg_tokenize(line)
+        try:
+            if arg[0]  == 'list':
+                user = None
+                if len(arg) > 1:
+                    user = arg[1]
+                self._do_permission_list(user)
+            elif arg[0] == 'add' and len(arg) >= 3:
+                user = arg[1]
+                for action in arg[2:]:
+                    self._do_permission_add(user, action)
+            elif arg[0] == 'remove'  and len(arg) >= 3:
+                user = arg[1]
+                for action in arg[2:]:
+                    self._do_permission_remove(user, action)
+            else:   
+                self.tracadm.do_help('permission')
+        except Exception, e:
+            print 'Permission %s failed:' % arg[0], e
+        
+    def _do_permission_list(self, user=None):
+        if user:
+            rows = self.tracadm.db_query("SELECT username, action FROM permission "
+                                 "WHERE username='%s' ORDER BY action" % user)
+        else:
+            rows = self.tracadm.db_query("SELECT username, action FROM permission "
+                                 "ORDER BY username, action")
+        self.tracadm.print_listing(['User', 'Action'], rows)
+        print
+        print 'Available actions:'
+        actions = PermissionSystem(self.tracadm.env_open()).get_actions()
+        actions.sort()
+        text = ', '.join(actions)
+        print util.wrap(text, initial_indent=' ', subsequent_indent=' ',
+                        linesep='\n')
+        print
+
+    def _do_permission_add(self, user, action):
+        if not action.islower() and not action.isupper():
+            print 'Group names must be in lower case and actions in upper case'
+            return
+        self.tracadm.db_update("INSERT INTO permission VALUES('%s', '%s')"
+                       % (user, action))
+
+    def _do_permission_remove(self, user, action):
+        sql = "DELETE FROM permission"
+        clauses = []
+        if action != '*':
+            clauses.append("action='%s'" % action)
+        if user != '*':
+            clauses.append("username='%s'" % user)
+        if clauses:
+            sql += " WHERE " + " AND ".join(clauses)
+        self.tracadm.db_update(sql)
+
+
     # Internal methods
 
     def _get_store(self):
Index: trac/wiki/api.py
===================================================================
--- trac/wiki/api.py	(revision 1976)
+++ trac/wiki/api.py	(working copy)
@@ -27,8 +27,10 @@
 
 from trac.core import *
 from trac.util import to_utf8
+from trac import util
+from trac.scripts.admin import IAdminConsoleProvider
+import os, time
 
-
 class IWikiChangeListener(Interface):
     """
     Extension point interface for components that should get notified about the
@@ -83,13 +85,11 @@
         """
         Return an iterable over (namespace, formatter) tuples.
         """
- 
-
 class WikiSystem(Component):
     """
     Represents the wiki system.
     """
-    implements(IWikiChangeListener, IWikiSyntaxProvider)
+    implements(IWikiChangeListener, IWikiSyntaxProvider, IAdminConsoleProvider)
 
     change_listeners = ExtensionPoint(IWikiChangeListener)
     macro_providers = ExtensionPoint(IWikiMacroProvider)
@@ -158,3 +158,148 @@
             return '<a class="wiki" href="%s">%s</a>' \
                    % (formatter.href.wiki(page) + anchor, label)
 
+    # IAdminConsoleProvider methods
+
+    _help_wiki = [('wiki list', 'List wiki pages'),
+                  ('wiki remove <name>', 'Remove wiki page'),
+                  ('wiki export <page> [file]',
+                   'Export wiki page to file or stdout'),
+                  ('wiki import <page> [file]',
+                   'Import wiki page from file or stdin'),
+                  ('wiki dump <directory>',
+                   'Export all wiki pages to files named by title'),
+                  ('wiki load <directory>',
+                   'Import all wiki pages from directory'),
+                  ('wiki upgrade',
+                   'Upgrade default wiki pages to current version')]
+
+    def get_console_commands(self, tracadm):
+        self.tracadm = tracadm
+        yield ('wiki', self._help_wiki, self.do_wiki, self.complete_wiki)
+
+    def complete_wiki(self, text, line, begidx, endidx):
+        argv = self.tracadm.arg_tokenize(line)
+        argc = len(argv)
+        if line[-1] == ' ': # Space starts new argument
+            argc += 1
+        if argc == 2:
+            comp = ['list', 'remove', 'import', 'export', 'dump', 'load',
+                    'upgrade']
+        else:
+            if argv[1] in ('dump', 'load'):
+                comp = self.tracadm.get_dir_list(argv[-1], 1)
+            elif argv[1] in ('export', 'import'):
+                if argc == 3:
+                    comp = self.get_wiki_list()
+                elif argc == 4:
+                    comp = self.tracadm.get_dir_list(argv[-1])
+        return self.tracadm.word_complete(text, comp)
+
+    def do_wiki(self, line):
+        arg = self.tracadm.arg_tokenize(line)
+        try:
+            if arg[0]  == 'list':
+                self._do_wiki_list()
+            elif arg[0] == 'remove'  and len(arg)==2:
+                name = arg[1]
+                self._do_wiki_remove(name)
+            elif arg[0] == 'import' and len(arg) == 3:
+                title = arg[1]
+                file = arg[2]
+                self._do_wiki_import(file, title)
+            elif arg[0] == 'export'  and len(arg) in [2,3]:
+                page = arg[1]
+                file = (len(arg) == 3 and arg[2]) or None
+                self._do_wiki_export(page, file)
+            elif arg[0] == 'dump' and len(arg) in [1,2]:
+                dir = (len(arg) == 2 and arg[1]) or ''
+                self._do_wiki_dump(dir)
+            elif arg[0] == 'load' and len(arg) in [1,2]:
+                dir = (len(arg) == 2 and arg[1]) or ''
+                self._do_wiki_load(dir)
+            elif arg[0] == 'upgrade' and len(arg) == 1:
+                self._do_wiki_load(default_dir('wiki'),
+                                   ignore=['WikiStart', 'checkwiki.py'])
+            else:
+                self.tracadm.do_help ('wiki')
+        except Exception, e:
+            print 'Wiki %s failed:' % arg[0], e
+
+    def _do_wiki_list(self):
+        rows = self.tracadm.db_query("SELECT name,max(version),time "
+                             "FROM wiki GROUP BY name ORDER BY name")
+        self.tracadm.print_listing(['Title', 'Edits', 'Modified'],
+                           [(r[0], r[1], self.tracadm._format_datetime(r[2])) for r in rows])
+
+    def _do_wiki_remove(self, name):
+        cnx = self.tracadm.db_open()
+        cursor = cnx.cursor()
+        cursor.execute('SELECT name FROM wiki WHERE name=%s', name)
+        if not cursor.fetchone():
+            raise Exception("No such wiki page '%s'" % name)
+        cursor.execute("DELETE FROM wiki WHERE name=%s", (name,))
+
+    def _do_wiki_import(self, filename, title, cursor=None):
+        if not os.path.isfile(filename):
+            print "%s is not a file" % filename
+            return
+        f = open(filename,'r')
+        data = util.to_utf8(f.read())
+
+        # Make sure we don't insert the exact same page twice
+        rows = self.tracadm.db_query("SELECT text FROM wiki WHERE name='%s' "
+                             "ORDER BY version DESC LIMIT 1" % title, cursor)
+        old = list(rows)
+        if old and data == old[0][0]:
+            print '  %s already up to date.' % title
+            return
+
+        data = data.replace("'", "''") # Escape ' for safe SQL
+        f.close()
+
+        sql = ("INSERT INTO wiki(version,name,time,author,ipnr,text) "
+               " SELECT 1+COALESCE(max(version),0),'%(title)s','%(time)s',"
+               " '%(author)s','%(ipnr)s','%(text)s' FROM wiki "
+               " WHERE name='%(title)s'"
+               % {'title':title,
+                  'time':int(time.time()),
+                  'author':'trac',
+                  'ipnr':'127.0.0.1',
+                  'locked':'0',
+                  'text':data})
+        self.tracadm.db_update(sql, cursor)
+
+    def _do_wiki_export(self, page, filename=''):
+        data = self.tracadm.db_query("SELECT text FROM wiki WHERE name='%s' "
+                             "ORDER BY version DESC LIMIT 1" % page)
+        text = data.next()[0]
+        if not filename:
+            print text
+        else:
+            if os.path.isfile(filename):
+                raise Exception("File '%s' exists" % filename)
+            f = open(filename,'w')
+            f.write(text)
+            f.close()
+
+    def _do_wiki_dump(self, dir):
+        pages = self.get_wiki_list()
+        for p in pages:
+            dst = os.path.join(dir, urllib.quote(p, ''))
+            print " %s => %s" % (p, dst)
+            self._do_wiki_export(p, dst)
+
+    def _do_wiki_load(self, dir, cursor=None, ignore=[]):
+        for page in os.listdir(dir):
+            if page in ignore:
+                continue
+            filename = os.path.join(dir, page)
+            page = urllib.unquote(page)
+            if os.path.isfile(filename):
+                print " %s => %s" % (filename, page)
+                self._do_wiki_import(filename, page, cursor)
+
+    def get_wiki_list(self):
+        rows = self.tracadm.db_query('SELECT DISTINCT name FROM wiki')
+        return [row[0] for row in rows]
+
