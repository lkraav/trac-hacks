#!/usr/bin/python
# Copyright (C) 2008-2009 NAV CANADA (http://www.navcanada.ca)
# All rights reserved.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution.
#
# Author: Mike Stoddart <stoddam@navcanada.ca>

import sys, os, pg, shutil
from config import *
from common import *

def delete_database(project, db_passwd):
	print "Deleting database " + project
	
	# Gracefully restart Apache to remove any old/stale connections
	# that might prevent us from deleting the database.
	print "Restarting the Apache service to cleanly delete the database"
	command = SERVICE + " httpd graceful"
	os.system(command)
	
	# Establish a connection to Postgresql.
	db = pg.connect('postgres', DB_HOST, user=DB_USER, passwd=db_passwd)
	
	# Create the project database.
	try:
		db.query("drop database " + project)
	except pg.ProgrammingError, e:
		print "\tDatabase " + project + " could not be deleted, ignoring"
		print "\t", e

def delete_trac_env(project, trac_root):
	fn = trac_root + os.sep + project
	print "Deleting Trac environment from " + fn
	
	try:
		shutil.rmtree(fn)
	except OSError, e:
		print "\tTrac environment " + fn + " not found, ignoring"

def delete_svn_repo(project, svn_root):
	fn = svn_root + os.sep + project
	print "Deleting Subversion repository from " + fn
	
	try:
		shutil.rmtree(fn)
	except OSError, e:
		print "\tSubversion repository " + fn + " not found, ignoring"

svn_root = ROOT_PATH + os.sep + "svn"
trac_root = ROOT_PATH + os.sep + "trac"

#prompt for a project
project = prompt_project(show_available=True, restrict_available=True)

print
print "This will delete the project trac environment, database and :"
print "\t" + svn_root + os.sep + project + os.sep
print "\t" + trac_root + os.sep + project + os.sep
print "\t" + get_project_conf() + os.sep + project + ".*"
print
if prompt_confirmation("Are you sure you want to delete this project?"):
	print
	
	#Get a password to use for the database
	if DB_PASSWD != "": db_passwd = DB_PASSWD
	else: db_passwd = prompt_password()

	delete_database(project, db_passwd)
	delete_trac_env(project, trac_root)
	delete_svn_repo(project, svn_root)
	delete_project_conf(project)
	os.system("%s httpd reload" % SERVICE)
else:
	print "Project " + project + " will not be deleted, exiting...."

