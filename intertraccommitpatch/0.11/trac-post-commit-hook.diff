*** trac-post-commit-hook.org	Fri May  1 20:17:54 2009
--- trac-post-commit-hook	Thu Jul 23 22:10:09 2009
***************
*** 112,121 ****
  from trac.util.datefmt import utc
  from trac.versioncontrol.api import NoSuchChangeset
  
! ticket_prefix = '(?:#|(?:ticket|issue|bug)[: ]?)'
  ticket_reference = ticket_prefix + '[0-9]+'
! ticket_command =  (r'(?P<action>[A-Za-z]*).?'
!                    '(?P<ticket>%s(?:(?:[, &]*|[ ]?and[ ]?)%s)*)' %
                     (ticket_reference, ticket_reference))
  
  if options.envelope:
--- 112,120 ----
  from trac.util.datefmt import utc
  from trac.versioncontrol.api import NoSuchChangeset
  
! ticket_prefix = '#'
  ticket_reference = ticket_prefix + '[0-9]+'
! ticket_command =  (r'(?P<action>[A-Za-z]*) (?P<prj>[A-Za-z0-9_]*:*)(?P<ticket>%s(?:(?:[, &]*|[ ]?and[ ]?)%s)*)' %
                     (ticket_reference, ticket_reference))
  
  if options.envelope:
***************
*** 140,145 ****
--- 139,147 ----
  
      def __init__(self, project=options.project, author=options.user,
                   rev=options.rev, url=options.url):
+         tracpath = project[0:str.rfind(project,'/')+1]
+         tracproj = project[str.rfind(project,'/')+1:]
+         
          self.env = open_environment(project)
          repos = self.env.get_repository()
          repos.sync()
***************
*** 152,196 ****
              return # out of scope changesets are not cached
          self.author = chgset.author
          self.rev = rev
!         self.msg = "(In [%s]) %s" % (rev, chgset.message)
          self.now = datetime.now(utc)
  
!         cmd_groups = command_re.findall(self.msg)
  
          tickets = {}
!         for cmd, tkts in cmd_groups:
              funcname = CommitHook._supported_cmds.get(cmd.lower(), '')
              if funcname:
                  for tkt_id in ticket_re.findall(tkts):
                      func = getattr(self, funcname)
!                     tickets.setdefault(tkt_id, []).append(func)
  
-         for tkt_id, cmds in tickets.iteritems():
-             try:
-                 db = self.env.get_db_cnx()
-                 
-                 ticket = Ticket(self.env, int(tkt_id), db)
-                 for cmd in cmds:
-                     cmd(ticket)
- 
-                 # determine sequence number... 
-                 cnum = 0
-                 tm = TicketModule(self.env)
-                 for change in tm.grouped_changelog_entries(ticket, db):
-                     if change['permanent']:
-                         cnum += 1
-                 
-                 ticket.save_changes(self.author, self.msg, self.now, db, cnum+1)
-                 db.commit()
-                 
-                 tn = TicketNotifyEmail(self.env)
-                 tn.notify(ticket, newticket=0, modtime=self.now)
-             except Exception, e:
-                 # import traceback
-                 # traceback.print_exc(file=sys.stderr)
-                 print>>sys.stderr, 'Unexpected error while processing ticket ' \
-                                    'ID %s: %s' % (tkt_id, e)
-             
  
      def _cmdClose(self, ticket):
          ticket['status'] = 'closed'
--- 154,200 ----
              return # out of scope changesets are not cached
          self.author = chgset.author
          self.rev = rev
!         self.msg = "(In [%s:changeset:%s %s]) %s" % (tracproj, rev, rev, chgset.message)
          self.now = datetime.now(utc)
  
!         cmd_groups = command_re.findall(chgset.message)
  
          tickets = {}
!         for cmd, prj, tkts in cmd_groups:
!             prj = prj[0:len(prj)-1]
              funcname = CommitHook._supported_cmds.get(cmd.lower(), '')
              if funcname:
                  for tkt_id in ticket_re.findall(tkts):
                      func = getattr(self, funcname)
!                     try:
!                         if prj == "":
!                             env1 = self.env
!                         else:
!                             env1 = open_environment(tracpath + prj)
! 
!                         db = env1.get_db_cnx()
!                         
!                         ticket = Ticket(env1, int(tkt_id), db)
!                         func(ticket)
! 
!                         # determine sequence number... 
!                         cnum = 0
!                         tm = TicketModule(env1)
!                         for change in tm.grouped_changelog_entries(ticket, db):
!                             if change['permanent']:
!                                 cnum += 1
!                         
!                         ticket.save_changes(self.author, self.msg, self.now, db, cnum+1)
!                         db.commit()
!                         
!                         tn = TicketNotifyEmail(env1)
!                         tn.notify(ticket, newticket=0, modtime=self.now)
!                     except Exception, e:
!                         # import traceback
!                         # traceback.print_exc(file=sys.stderr)
!                         print>>sys.stderr, 'Unexpected error while processing ticket ' \
!                                            'ID %s: %s' % (tkt_id, e)
  
  
      def _cmdClose(self, ticket):
          ticket['status'] = 'closed'
