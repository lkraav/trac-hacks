Files trac-trunk/trac/__init__.pyc and aw-trac/trac/__init__.pyc differ
diff -urN trac-trunk/trac/db/postgres_backend.py aw-trac/trac/db/postgres_backend.py
--- trac-trunk/trac/db/postgres_backend.py	2005-12-29 02:34:53.463747000 -0800
+++ aw-trac/trac/db/postgres_backend.py	2006-03-08 15:31:15.837578067 -0800
@@ -20,6 +20,7 @@
 
 psycopg = None
 PgSQL = None
+PGSchemaError = None
 
 
 class PostgreSQLConnector(Component):
@@ -38,6 +39,11 @@
                 params={}):
         cnx = self.get_connection(path, user, password, host, port, params)
         cursor = cnx.cursor()
+        try: 
+            cursor.execute('CREATE SCHEMA %s' % cnx.schema) 
+            cursor.execute('SET search_path TO %s, public', (cnx.schema,)) 
+        except AttributeError: 
+            pass 
         from trac.db_default import schema
         for table in schema:
             for stmt in self.to_sql(table):
@@ -76,14 +82,19 @@
         # We support both psycopg and PgSQL but prefer psycopg
         global psycopg
         global PgSQL
+        global PGSchemaError
         if not psycopg and not PgSQL:
             try:
                 try:
+                    from psycopg2 import ProgrammingError as PGSchemaError
                     import psycopg2 as psycopg
                 except ImportError:
                     import psycopg
+                    from psycopg import ProgrammingError as PGSchemaError
             except ImportError:
                 from pyPgSQL import PgSQL
+                from pyPgSQL.libpq import OperationalError as PGSchemaError
+        self.PGSchemaError = PGSchemaError
         if psycopg:
             dsn = []
             if path:
@@ -99,6 +110,13 @@
             cnx = psycopg.connect(' '.join(dsn))
         else:
             cnx = PgSQL.connect('', user, password, host, path, port)
+        try: 
+            self.schema = params['schema'] 
+            cnx.cursor().execute('SET search_path TO %s, public', (self.schema,)) 
+        except self.PGSchemaError: 
+            cnx.rollback() 
+        except (KeyError, AttributeError): 
+            pass 
         ConnectionWrapper.__init__(self, cnx)
 
     def cast(self, column, type):
@@ -113,3 +131,16 @@
     def get_last_id(self, cursor, table, column='id'):
         cursor.execute("SELECT CURRVAL('%s_%s_seq')" % (table, column))
         return cursor.fetchone()[0]
+
+    def cursor(self):
+        cursor = self.cnx.cursor()
+        try:
+            try:
+                cursor.execute("SET search_path TO %s, public", (self.schema,))
+                self.cnx.commit()
+            except self.PGSchemaError:
+                self.cnx.rollback()
+        except AttributeError:
+            pass
+        return cursor
+
