diff -urN trac-0.9.3/trac/db.py aw-trac-0.9.3/trac/db.py
--- trac-0.9.3/trac/db.py	2005-12-01 12:47:37.000000000 -0800
+++ aw-trac-0.9.3/trac/db.py	2006-01-13 12:15:13.968829000 -0800
@@ -85,6 +85,7 @@
                 return
             yield row
 
+PGSchemaError = None
 
 class ConnectionWrapper(object):
     """Generic wrapper around connection objects.
@@ -92,7 +93,7 @@
     This wrapper makes cursors produced by the connection iterable using
     `IterableCursor`.
     """
-    __slots__ = ['cnx']
+    __slots__ = ['cnx', 'schema']
 
     def __init__(self, cnx):
         self.cnx = cnx
@@ -103,7 +104,17 @@
         return object.__getattr__(self, name)
 
     def cursor(self):
-        return IterableCursor(self.cnx.cursor())
+        global PGSchemaError
+        cur = self.cnx.cursor()
+        try:
+            cur.execute("SET search_path TO %s, public", (self.schema,))
+            self.cnx.commit()
+        except AttributeError:
+            pass
+        except PGSchemaError:
+            self.cnx.rollback()
+            pass
+        return IterableCursor(cur)
 
 
 class TimeoutError(Exception):
@@ -140,7 +151,7 @@
         self._cursize = 0 # current pool size, includes active connections
         self._cnx_class = cnx_class
         self._args = args
-
+       
     def get_cnx(self, timeout=None):
         start = time.time()
         self._available.acquire()
@@ -355,7 +366,7 @@
 class PostgreSQLConnection(ConnectionWrapper):
     """Connection wrapper for PostgreSQL."""
 
-    __slots__ = ['cnx']
+    __slots__ = ['cnx', 'schema']
 
     poolable = True
 
@@ -366,14 +377,18 @@
         # We support both psycopg and PgSQL but prefer psycopg
         global psycopg
         global PgSQL
+        global PGSchemaError
         if not psycopg and not PgSQL:
             try:
                 try:
                     import psycopg2 as psycopg
+                    from psycopg2 import ProgrammingError as PGSchemaError
                 except ImportError:
                     import psycopg
+                    from pyscopg import ProgrammingError as PGSchemaError
             except ImportError:
                 from pyPgSQL import PgSQL
+                from pyPgSQL.libpq import OperationalError as PGSchemaError
         if psycopg:
             dsn = []
             if path:
@@ -389,6 +404,13 @@
             cnx = psycopg.connect(' '.join(dsn))
         else:
             cnx = PgSQL.connect('', user, password, host, path, port)
+        try:
+            self.schema = params['schema']
+            cnx.cursor().execute('SET search_path TO %s, public', (self.schema,))
+        except PGSchemaError:
+            cnx.rollback()
+        except (KeyError, AttributeError):
+            pass
         ConnectionWrapper.__init__(self, cnx)
 
     def cast(self, column, type):
@@ -407,6 +429,11 @@
     def init_db(cls, **args):
         self = cls(**args)
         cursor = self.cursor()
+        try:
+            cursor.execute('CREATE SCHEMA %s' % self.schema)
+            cursor.execute('SET search_path TO %s, public', (self.schema,))
+        except AttributeError:
+            pass
         from trac.db_default import schema
         for table in schema:
             for stmt in cls.to_sql(table):
@@ -443,6 +470,7 @@
 
 def get_cnx_pool(env):
     cls, args = _get_cnx_class(env.path, env.config.get('trac', 'database'))
+
     return ConnectionPool(5, cls, **args)
 
 def _get_cnx_class(env_path, db_str):
