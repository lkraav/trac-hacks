                 =   SearchAttachmentsPlugin    =

==   What is it?   ==

SearchAttachmentsPlugin will add a new "attachment" check box in the search form.
It will allow you to search all configured file formats (usually doc,ppt and .pdf) and 
present an excerpt of the matching documents in the results page.

Reported as working on the following environment:
 * trac: 0.10.3
 * platforms: Linux


==   How does it work?   ==

The plug uses external commands to:

   === Transform attachment files to text files called meta files ===
   The meta files are stored in the attachments directory, with a .meta extension.
   Transformation to plain text is done by invoking command line filter tools configured 
   in trac.ini. For instance, on Linux you may use `pdftotext`, `catdoc` or `catppt` 
   as fillers for .pdf, .doc or .ppt documents.

   === Index the meta files ===
   Each time a new attachment is uploaded, the plugin uses the appropriate filter to generate
   a  meta file from the document. Then the index is updated in the background. The index file 
   is stored in the trac environment, in a new attachments/index directory. The filter command 
   to use is selected based on the extension of the uploaded file.

   The plugin uses the `swish-e` 2.4.5 command line for indexing, http://swish-e.org/

   === Search ===
   When a search in attachments is launched from trac, the plugin actually runs the 
   `swish-e` command to get the results.


==   How to install?   ==

  * Install swish-e, http://swish-e.org/

  * Install filter tools for the formats you want to index:
    * `catdoc` and `catppt`, http://www.45.free.net/~vitus/software/catdoc/
    * `pdftotext`, http://www.foolabs.com/xpdf/

  * Download the code from http://trac-hacks.org/wiki/SearchAttachmentsPlugin[[BR]]
    to YOUR_SOURCE_DIR

  * Install the plugin
{{{
    python setup.py bdist_egg
    cp dist/TracSearchAttachmentsPlugin-0.1-py2.4.egg /path/to/your/env/plugins/
}}}

  * Trac 10.x and 11.x source code must be manually modified for SEAT plugin to work.
    The file to modify is '''attachment.py''', on a Linux Fedora system, it is located in
    /usr/lib/python2.4/site-packages/trac

{{{

162     def insert(self, filename, fileobj, size, t=None, db=None):
...
...
184         try:
185             # Note: `path` is an unicode string because `self.path` was one.
186             # As it contains only quoted chars and numbers, we can use `ascii`
187             basename = os.path.basename(path).encode('ascii')
188             filename = unicode_unquote(basename)
189
190             cursor = db.cursor()
191             cursor.execute("INSERT INTO attachment "
192                            "VALUES (%s,%s,%s,%s,%s,%s,%s,%s)",
193                            (self.parent_type, self.parent_id, filename,
194                             self.size, self.time, self.description, self.author,
195                             self.ipnr))
196             shutil.copyfileobj(fileobj, targetfile)
197             self.filename = filename
198
199             self.env.log.info('New attachment: %s by %s', self.title,
200                               self.author)
201
202             if handle_ta:
203                 db.commit()
204
205             targetfile.close() # << Line to add for SEAT plugin
206
207             for listener in AttachmentModule(self.env).change_listeners:
208                 listener.attachment_added(self)
209         finally:
210             targetfile.close()

}}}


  * Use the trac-seat utility to index existing attachments:
{{{
    cp YOUR_SOURCE_DIR/searchattachmentsplugin/0.10/trac-seat /path/to/your/env/index
    cd /path/to/your/env/index
    chmod +x trac-seat
    ./trac-seat /path/to/your/env meta
    ./trac-seat /path/to/your/env index -c
    cd ..
    chown -R apache:apache /path/to.your/env/index
}}}

  * Configure trac.ini
{{{

   [components]
   ....
   searchattachments.* = enabled

   [attachment]
   ...
   # This is the path to the swish-e command on your system
   swish = /usr/local/bin/swish-e
   seat  = /path/to/your/env/trac-seat

   # The first %s is the absolute path of the input file.
   # The second %s is the absolute path of the text file generated by the command.
   filter.doc = /usr/local/bin/catdoc -b "%s" > "%s"
   filter.ppt = /usr/local/bin/catppt "%s" > "%s"
   filter.pdf = /usr/bin/pdftotext "%s" "%s"
}}}

  There is no need to declare a filter command for .txt or .text. Text files are handled
  natively. To index a new non-text format, just add a filter.* entry using the appropriate
  command line tool for this format.
{{{
   filter.EXTENSION = path_to_EXTENSION_to_text_command -infile "%s" -outfile "%s"
}}}

  * '''restart''' the trac server


== RESOURCES ==
Word to text tools:
 * `catdoc`, http://www.45.free.net/~vitus/software/catdoc/
 * `antiword`, http://www.winfield.demon.nl/
 * `wvWare`, http://wvware.sourceforge.net/

Power Point to text tools:
 * `catppt`, http://www.45.free.net/~vitus/software/catdoc/

Acrobat to text tools:
 * `pdftotext`, http://www.foolabs.com/xpdf/

== IDEAS / TODO ==

 * Use swish-e to merge (when adding) instead of brute force re-indexing of all documents.
   For ~100 documents, the brute force solution will only takes a few seconds.
   How to avoid brute with swish-e when deleting a document?

 * Indexer
    * Use a different indexer
    * ...or abstraction to indexers like http://swapoff.org/wiki/pyndexter
    * ...or mysql full text search?

 * Improving packaging (utility, auto-indexing ...)

 * Better integration with trac Mime-type management and converters
