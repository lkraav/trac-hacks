# -*- coding:utf8 -*-
from __future__ import with_statement
import re, os, codecs
import urllib, hashlib
from time import time
from threading import Lock
from tempfile import mktemp, NamedTemporaryFile
from subprocess import Popen, PIPE
from contextlib import contextmanager

from trac.core import *
from trac.wiki import IWikiMacroProvider
from trac.web import IRequestHandler 
from trac.wiki.formatter import system_message

from genshi.builder import tag

argument_help = u"""
 Arguments (Only Trac 0.12 or later)::
 * '''type''' -- Image format(svg or png).[[BR]]
   In Trac 0.11, you can use blockdiag_svg/blockdiag_png/seqdiag_svg/seqdiag_png processors instead.
 * '''others(width, height, align etc)''' -- Treated as IMG tag attributes.

"""

blockdiag_help = u"""
Render block diagrams. 
See [http://tk0miya.bitbucket.org/blockdiag/build/html/index.html blockdiag]
 Example::
{{{
{{{
#!blockdiag(type = svg, width="75%")
{
  A -> B -> C
       B -> D
}
}}}
}}}
""" + argument_help

seqdiag_help = u"""
Render seqence diagrams. 
See [http://tk0miya.bitbucket.org/seqdiag/build/html/index.html seqdiag]
 Example::
{{{
{{{
#!seqdiag(type=png, width=600)
diagram {
  browser  -> webserver [label = "GET /index.html"];
  browser <-- webserver;
  browser  -> webserver [label = "POST /blog/comment"];
              webserver  -> database [label = "INSERT comment"];
              webserver <-- database;
  browser <-- webserver;
}
}}}
}}}
""" + argument_help

macro_defs = {  "blockdiag" : blockdiag_help, 
                "seqdiag" : seqdiag_help,
                "blockdiag_svg" : "Alternate of blockdiag(type=svg) for Trac 0.11",
                "blockdiag_png" : "Alternate of blockdiag(type=png) for Trac 0.11",
                "seqdiag_svg" : "Alternate of seqdiag(type=svg) for Trac 0.11",
                "seqdiag_png" : "Alternate of seqdiag(type=png) for Trac 0.11",
              }

_lock = Lock()

@contextmanager
def lock():
    _lock.acquire()
    try:
        yield
    finally:
        _lock.release()

class BlockDiagPlugin(Component):
    """
    Provide blockdiag/seqdiag processor witch embed diagrams generated by blockdiag/seqdiag.
    See http://tk0miya.bitbucket.org/blockdiag/build/html/index.html and http://tk0miya.bitbucket.org/seqdiag/build/html/index.html
    """
    implements (IWikiMacroProvider, IRequestHandler)
    
    macros = None
    cache = {}

    content_types = {
            "png" : "image/png",
            "svg" : "image/svg+xml",
            }

    gc_time = 0 
    
    def get_macros(self):
        return macro_defs.keys()

    def get_macro_description(self, name):
        return macro_defs[name]

    def expand_macro(self, formatter, name, content, args = None):
        if args is None:
            args = {}

        if name[-4:] in ('_svg', '_png'):
            name, type = name.split('_')
        else:
            type = (args.get('type') or self.env.config.get('blockdiag', 'default_type', 'png')).lower()
            if type not in ('svg', 'png'):
                return system_message("Invalid type(%s). Type must be 'svg' or 'png'" % type)

        # nonascii unicode can't be passed to hashlib.
        id = hashlib.sha1('%s,%s,%r' % (name, type, content)).hexdigest()

        ## Create img tag.
        params = { "src": formatter.req.href("%s/%s" % (name, id)) }
        for key, value in args.iteritems():
            if key != "type":
                params[key] = value
        output = tag.img(**params)
        
        ## Cleanup garbage.
        self._cleanup_garbage_cache()

        ## Check cache
        if self.cache.has_key(id):
            with lock():
                try:
                    data, type, ts = self.cache[id]
                    self.cache[id] = (data, type, time())
                    return output
                except ValueError:
                    pass

        ## Generate image and cache it.
        infile = mktemp(prefix='%s-' % name)
        outfile = mktemp(prefix='%s-' % name)
        try:
            with codecs.open(infile, 'w', 'utf8') as f:
                f.write(content)
            cmd = [name, '-a', '-T', type, '-o', outfile, infile]
            self.env.log.debug('(%s) command: %r' % (name, cmd))
            try:
                proc = Popen(cmd, stderr=PIPE)
                stderr_value = proc.communicate()[1]
            except Exception, e:
                self.env.log.error('(%s) %r' % (name, e))
                return system_message("Failed to generate diagram. (%s is not found.)" % name)

            if proc.returncode != 0:
                self.env.log.error('(%s) %s' % (name, stderr_value))
                return system_message("Failed to generate diagram. (rc=%d)" % proc.returncode)
            with open(outfile, 'rb') as f:
                data = f.read()

        except Exception, e:
            self.env.log.error('(%s) %r' % (name, e))
            return system_message("Failed to generate diagram.")
        finally:
            for path in (infile, outfile):
                try:
                    os.remove(path)
                except:
                    pass

        with lock():
            if not self.cache.has_key(id):
                self.cache[id] = (data, type, time())

        return output

    def match_request(self, req):
        return re.match(r'/(blockdiag|seqdiag)/.+$', req.path_info)

    def process_request(self, req):
        m = re.match(r'/(blockdiag|seqdiag)/(.+)$', req.path_info)
        if not m:
            return ""
        with lock():
            data, type, ts = self.cache[m.group(2)]
            
        req.send(data, self.content_types[type], status=200)
        return ""

    def _cleanup_garbage_cache(self):
        """Drop inactive cache."""
        now = time()

        if now < self.gc_time + 600:
            return
        with lock():
            if now < self.gc_time + 600: # double check
                return
            self.env.log.debug('(blockdiag/seqdiag) cleanup cache')
            for k, (data, type, ts) in self.cache.items():
                if ts < now - 3600:
                    self.env.log.debug('(blockdiag/seqdiag) drop %s' % k)
                    del(self.cache[k])
            self.gc_time = now

