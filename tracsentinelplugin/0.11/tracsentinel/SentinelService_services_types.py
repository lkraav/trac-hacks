################################################## 
# SentinelService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://sentinel.d6501.ais.msu.edu/types
##############################

class ns0:
    targetNamespace = "http://sentinel.d6501.ais.msu.edu/types"

    class Credential_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        type = (schema, "Credential")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Credential_Def.schema
            TClist = [ZSI.TC.String(pname="SSN", aname="_SSN", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="appID", aname="_appID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="employeePID", aname="_employeePID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstName", aname="_firstName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="identityToken", aname="_identityToken", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastName", aname="_lastName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publicID", aname="_publicID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="securityIDList", aname="_securityIDList", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sentinelURL", aname="_sentinelURL", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="studentPID", aname="_studentPID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SSN = None
                    self._appID = None
                    self._employeePID = None
                    self._firstName = None
                    self._identityToken = None
                    self._lastName = None
                    self._publicID = None
                    self._securityIDList = None
                    self._sentinelURL = None
                    self._studentPID = None
                    return
            Holder.__name__ = "Credential_Holder"
            self.pyclass = Holder

    class GetCredentialRequestBean_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        type = (schema, "GetCredentialRequestBean")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetCredentialRequestBean_Def.schema
            TClist = [ZSI.TC.String(pname="appID", aname="_appID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="browserIPAddress", aname="_browserIPAddress", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientPassword", aname="_clientPassword", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientUserID", aname="_clientUserID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="token", aname="_token", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._appID = None
                    self._browserIPAddress = None
                    self._clientPassword = None
                    self._clientUserID = None
                    self._token = None
                    return
            Holder.__name__ = "GetCredentialRequestBean_Holder"
            self.pyclass = Holder

    class GetCredentialResponseBean_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        type = (schema, "GetCredentialResponseBean")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetCredentialResponseBean_Def.schema
            TClist = [GTD("http://sentinel.d6501.ais.msu.edu/types","Credential",lazy=False)(pname="credential", aname="_credential", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://sentinel.d6501.ais.msu.edu/types","Status",lazy=False)(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._credential = None
                    self._status = None
                    return
            Holder.__name__ = "GetCredentialResponseBean_Holder"
            self.pyclass = Holder

    class GetIdentityRequestBean_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        type = (schema, "GetIdentityRequestBean")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetIdentityRequestBean_Def.schema
            TClist = [ZSI.TC.String(pname="appID", aname="_appID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="browserIPAddress", aname="_browserIPAddress", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientPassword", aname="_clientPassword", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientUserID", aname="_clientUserID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssoAppID", aname="_ssoAppID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="token", aname="_token", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._appID = None
                    self._browserIPAddress = None
                    self._clientPassword = None
                    self._clientUserID = None
                    self._ssoAppID = None
                    self._token = None
                    return
            Holder.__name__ = "GetIdentityRequestBean_Holder"
            self.pyclass = Holder

    class GetIdentityResponseBean_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        type = (schema, "GetIdentityResponseBean")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetIdentityResponseBean_Def.schema
            TClist = [ZSI.TC.String(pname="publicID", aname="_publicID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://sentinel.d6501.ais.msu.edu/types","Status",lazy=False)(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._publicID = None
                    self._status = None
                    return
            Holder.__name__ = "GetIdentityResponseBean_Holder"
            self.pyclass = Holder

    class Status_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        type = (schema, "Status")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Status_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._message = None
                    return
            Holder.__name__ = "Status_Holder"
            self.pyclass = Holder

    class getCredential_Dec(ElementDeclaration):
        literal = "getCredential"
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        def __init__(self, **kw):
            kw["pname"] = ("http://sentinel.d6501.ais.msu.edu/types","getCredential")
            kw["aname"] = "_getCredential"
            if ns0.GetCredentialRequestBean_Def not in ns0.getCredential_Dec.__bases__:
                bases = list(ns0.getCredential_Dec.__bases__)
                bases.insert(0, ns0.GetCredentialRequestBean_Def)
                ns0.getCredential_Dec.__bases__ = tuple(bases)

            ns0.GetCredentialRequestBean_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getCredential_Dec_Holder"

    class getCredentialResponse_Dec(ElementDeclaration):
        literal = "getCredentialResponse"
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        def __init__(self, **kw):
            kw["pname"] = ("http://sentinel.d6501.ais.msu.edu/types","getCredentialResponse")
            kw["aname"] = "_getCredentialResponse"
            if ns0.GetCredentialResponseBean_Def not in ns0.getCredentialResponse_Dec.__bases__:
                bases = list(ns0.getCredentialResponse_Dec.__bases__)
                bases.insert(0, ns0.GetCredentialResponseBean_Def)
                ns0.getCredentialResponse_Dec.__bases__ = tuple(bases)

            ns0.GetCredentialResponseBean_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getCredentialResponse_Dec_Holder"

    class getIdentity_Dec(ElementDeclaration):
        literal = "getIdentity"
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        def __init__(self, **kw):
            kw["pname"] = ("http://sentinel.d6501.ais.msu.edu/types","getIdentity")
            kw["aname"] = "_getIdentity"
            if ns0.GetIdentityRequestBean_Def not in ns0.getIdentity_Dec.__bases__:
                bases = list(ns0.getIdentity_Dec.__bases__)
                bases.insert(0, ns0.GetIdentityRequestBean_Def)
                ns0.getIdentity_Dec.__bases__ = tuple(bases)

            ns0.GetIdentityRequestBean_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getIdentity_Dec_Holder"

    class getIdentityResponse_Dec(ElementDeclaration):
        literal = "getIdentityResponse"
        schema = "http://sentinel.d6501.ais.msu.edu/types"
        def __init__(self, **kw):
            kw["pname"] = ("http://sentinel.d6501.ais.msu.edu/types","getIdentityResponse")
            kw["aname"] = "_getIdentityResponse"
            if ns0.GetIdentityResponseBean_Def not in ns0.getIdentityResponse_Dec.__bases__:
                bases = list(ns0.getIdentityResponse_Dec.__bases__)
                bases.insert(0, ns0.GetIdentityResponseBean_Def)
                ns0.getIdentityResponse_Dec.__bases__ = tuple(bases)

            ns0.GetIdentityResponseBean_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getIdentityResponse_Dec_Holder"

# end class ns0 (tns: http://sentinel.d6501.ais.msu.edu/types)
