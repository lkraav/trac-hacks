=== templates/macros.cs
==================================================================
--- templates/macros.cs	(/mirror/trac)	(revision 2600)
+++ templates/macros.cs	(/trac/workflow-only)	(local)
@@ -179,4 +179,26 @@
     var:href ?>&amp;order=<?cs var:class ?><?cs
     if:order == class && !desc ?>&amp;desc=1<?cs /if ?>"><?cs var:title ?></a>
  </th><?cs
+/def ?><?cs
+
+def:form_control(control) ?><?cs
+ if:control.label ?><label for="<?cs var:control.name ?>"><?cs var:control.label ?><?cs /if ?><?cs
+ if:control.type == "select" ?><?cs
+  call:hdf_select(control.options, control.name, control.value, control.optional) ?><?cs
+ elif:control.type == "text" ?>
+  <input type="text" id="<?cs var:control.name ?>" name="<?cs var:control.name ?>" size="<?cs alt:size ?>40<?cs /alt ?>" value="<?cs var:control.value ?>"><?cs
+ elif:control.type == "textarea" ?>
+  <textarea id="<?cs var:control.name ?>" name="<?cs var:control.name ?>" class="wikitext" rows="<?cs alt:rows ?>10<?cs /alt ?>" cols="<?cs alt:cols ?>78<?cs /alt ?>"><?cs var:control.value ?></textarea><?cs
+ elif:control.type == "checkbox" || control.type == "radio" ?>
+  <span id="<?cs var:control.name ?>"><?cs
+   each:option = control.options ?><?cs
+    if:!option.name ?><?cs
+     set:option.name = name(option) ?><?cs
+    /if ?>
+    <input type="<?cs var:control.type ?>" id="<?cs var:control.name ?>_<?cs var:option.name ?>" name="<?cs var:control.name ?>"<?cs if:option.checked ?> checked<?cs /if ?>>
+    <label for="<?cs var:control.name ?>_<?cs var:option.name ?>" ?><?cs alt:option.label ?><?cs var:option.value ?><?cs /alt ?></label><?cs
+   /each
+  ?></span><?cs
+ /if ?><?cs
+ if:control.label ?></label><?cs /if ?><?cs
 /def ?>
=== templates/ticket.cs
==================================================================
--- templates/ticket.cs	(/mirror/trac)	(revision 2600)
+++ templates/ticket.cs	(/trac/workflow-only)	(local)
@@ -54,13 +54,13 @@
      if:ticket.status == 'assigned' ?> (accepted)<?cs /if ?></td>
   </tr><tr><?cs
   each:field = ticket.fields ?><?cs
-   if:!field.skip ?><?cs
+   if:!field.hidden ?><?cs
     set:num_fields = num_fields + 1 ?><?cs
    /if ?><?cs
   /each ?><?cs
   set:idx = 0 ?><?cs
   each:field = ticket.fields ?><?cs
-   if:!field.skip ?><?cs set:fullrow = field.type == 'textarea' ?><?cs
+   if:!field.hidden ?><?cs set:fullrow = field.type == 'textarea' ?><?cs
     if:fullrow && idx % 2 ?><th></th><td></td></tr><tr><?cs /if ?>
     <th id="h_<?cs var:name(field) ?>"><?cs var:field.label ?>:</th>
     <td<?cs if:fullrow ?> colspan="3"<?cs /if ?> headers="h_<?cs
@@ -175,12 +175,12 @@
    /if ?>
   <tr><?cs set:num_fields = 0 ?><?cs
   each:field = ticket.fields ?><?cs
-   if:!field.skip ?><?cs
+   if:!field.hidden ?><?cs
     set:num_fields = num_fields + 1 ?><?cs
    /if ?><?cs
   /each ?><?cs set:idx = 0 ?><?cs
    each:field = ticket.fields ?><?cs
-    if:!field.skip ?><?cs set:fullrow = field.type == 'textarea' ?><?cs
+    if:!field.hidden ?><?cs set:fullrow = field.type == 'textarea' ?><?cs
      if:fullrow && idx % 2 ?><?cs set:idx = idx + 1 ?><th class="col2"></th><td></td></tr><tr><?cs /if ?>
      <th class="col<?cs var:idx % 2 + 1 ?>"><?cs
        if:field.type != 'radio' ?><label for="<?cs var:name(field) ?>"><?cs
@@ -227,63 +227,60 @@
   </table>
  </fieldset><?cs /if ?>
 
- <?cs if:ticket.actions.accept || ticket.actions.reopen ||
-         ticket.actions.resolve || ticket.actions.reassign ?>
+ <?cs if:ticket.actions.0.action ?>
  <fieldset id="action">
   <legend>Action</legend><?cs
   if:!ticket.action ?><?cs set:ticket.action = 'leave' ?><?cs
   /if ?><?cs
-  def:action_radio(id) ?>
-   <input type="radio" id="<?cs var:id ?>" name="action" value="<?cs
+  def:action_radio(id)
+  ?><input type="radio" id="<?cs var:id ?>" name="action" value="<?cs
      var:id ?>"<?cs if:ticket.action == id ?> checked="checked"<?cs
      /if ?> /><?cs
   /def ?>
-  <?cs call:action_radio('leave') ?>
-   <label for="leave">leave as <?cs var:ticket.status ?></label><br /><?cs
-  if:ticket.actions.accept ?><?cs
-   call:action_radio('accept') ?>
-   <label for="accept">accept ticket</label><br /><?cs
-  /if ?><?cs
-  if:ticket.actions.reopen ?><?cs
-   call:action_radio('reopen') ?>
-   <label for="reopen">reopen ticket</label><br /><?cs
-  /if ?><?cs
-  if:ticket.actions.resolve ?><?cs
-   call:action_radio('resolve') ?>
-   <label for="resolve">resolve</label><?cs
-   if:len(ticket.fields.resolution.options) ?>
-    <label for="resolve_resolution">as:</label>
-    <?cs call:hdf_select(ticket.fields.resolution.options, "resolve_resolution",
-                         ticket.resolve_resolution, 0) ?><br /><?cs
-   /if ?><?cs
-  /if ?><?cs
-  if:ticket.actions.reassign ?><?cs
-   call:action_radio('reassign') ?>
-   <label for="reassign">reassign</label>
-   <label>to:<?cs
-   if:len(ticket.fields.owner.options) ?><?cs
-    call:hdf_select(ticket.fields.owner.options, "reassign_owner",
-                    ticket.reassign_owner, 1) ?><?cs
-   else ?>
-    <input type="text" id="reassign_owner" name="reassign_owner" size="40" value="<?cs
-      var:ticket.reassign_owner ?>" /><?cs
-   /if ?></label><?cs
-  /if ?><?cs
-  if ticket.actions.resolve || ticket.actions.reassign ?>
-   <script type="text/javascript"><?cs
-    each:action = ticket.actions ?>
-     var <?cs var:name(action) ?> = document.getElementById("<?cs var:name(action) ?>");<?cs
-    /each ?>
-     var updateActionFields = function() {
-       <?cs if:ticket.actions.resolve ?> enableControl('resolve_resolution', resolve.checked);<?cs /if ?>
-       <?cs if:ticket.actions.reassign ?> enableControl('reassign_owner', reassign.checked);<?cs /if ?>
-     };
-     addEvent(window, 'load', updateActionFields);<?cs
-     each:action = ticket.actions ?>
-      addEvent(<?cs var:name(action) ?>, 'click', updateActionFields);<?cs
-     /each ?>
-   </script><?cs
-  /if ?>
+
+  <script type="text/javascript">var action_controls = new Array();</script><?cs
+  
+  each:action = ticket.actions ?>
+  <script type="text/javascript">
+   action_controls['<?cs var:action.action ?>'] = new Array();
+  </script>
+  <label for="<?cs var:action.action ?>">
+  <?cs call:action_radio(action.action) ?>
+  <?cs alt:action.label ?><?cs var:action.action ?><?cs /alt ?>
+  </label><?cs
+  if:action.controls.0.name ?>
+  <span id="<?cs var:action.action ?>_controls"><?cs
+  each:control = action.controls ?>
+  <script type="text/javascript">
+   action_controls['<?cs var:action.action ?>'].push('<?cs var:control.name ?>');
+  </script><?cs
+  call:form_control(control) ?><?cs
+  /each ?>
+  </span>
+  <?cs /if ?>
+  <br /><?cs
+  /each ?>
+  <script type="text/javascript">
+   var action_control_elements = new Array();
+   for (var action in action_controls) {
+    action_control_elements[action] = document.getElementById(action);
+   }
+   var updateActionFields = function() {
+    for (var action in action_controls) {
+    var action_control = action_control_elements[action];
+
+     for (control in action_controls[action]) {
+      control = action_controls[action][control];
+      enableControl(control, action_control.checked);
+     }
+    }
+   }
+   addEvent(window, 'load', updateActionFields);
+   for (var action in action_controls) {
+   var action_control = action_control_elements[action];
+    addEvent(action_control, 'click', updateActionFields);
+   }
+  </script>
  </fieldset><?cs
  else ?>
   <input type="hidden" name="action" value="leave" /><?cs
=== trac/ticket/api.py
==================================================================
--- trac/ticket/api.py	(/mirror/trac)	(revision 2600)
+++ trac/ticket/api.py	(/trac/workflow-only)	(local)
@@ -19,15 +19,38 @@
 from trac.perm import IPermissionRequestor
 from trac.wiki import IWikiSyntaxProvider
 from trac.Search import ISearchSource, query_to_sql, shorten_result
+from trac.ticket.field import *
 
+class ITicketWorkflow(Interface):
+    """ This interface controls what actions can be performed on a ticket and
+        also a list of the available ticket fields. """
 
-class TicketSystem(Component):
-    implements(IPermissionRequestor, IWikiSyntaxProvider, ISearchSource)
+    # Control ticket actions
+    def get_ticket_actions(req, ticket):
+        """ Return the actions that are available given the current state of
+            ticket and the request object provided. """
 
-    # Public API
+    def get_ticket_action(req, ticket, action):
+        """ Return a trac.ticket.field.Field object for ticket action. """
 
-    def get_available_actions(self, ticket, perm_):
-        """Returns the actions that can be performed on the ticket."""
+    def apply_ticket_action(req, ticket, action):
+        """ Perform action on ticket. """
+
+    # Control ticket fields
+#    def filter_ticket_fields(req, ticket, fields):
+#        """ Given a list of ticket.Field objects and a ticket, return the
+#            filtered list of fields. """
+#
+#    def change_ticket_field(req, ticket, field):
+#        """ Change the value of a ticket field. """
+
+class DefaultTicketWorkflow(Component):
+    """ Default Trac implementation of ticket actions. """
+
+    implements(ITicketWorkflow)
+
+    # ITicketWorkflow methods
+    def get_ticket_actions(self, req, ticket):
         actions = {
             'new':      ['leave', 'resolve', 'reassign', 'accept'],
             'assigned': ['leave', 'resolve', 'reassign'          ],
@@ -36,9 +59,88 @@
         }
         perms = {'resolve': 'TICKET_MODIFY', 'reassign': 'TICKET_CHGPROP',
                  'accept': 'TICKET_CHGPROP', 'reopen': 'TICKET_CREATE'}
-        return [action for action in actions.get(ticket['status'], ['leave'])
-                if action not in perms or perm_.has_permission(perms[action])]
+        return [action for action in actions.get(
+                ticket['status'], ['leave', 'reopen'])
+                if action not in perms
+                or req.perm.has_permission(perms[action])]
 
+    def get_ticket_action_controls(self, req, ticket, action):
+        from trac.ticket import model
+        controls = {
+            'leave': {
+                'label': 'leave as %s' % ticket['status'],
+            },
+            'resolve': Select('resolve_resolution',
+                              options = [val.name for val in \
+                                         model.Resolution.select(self.env)],
+                              label = 'as:',
+                              value = req.args.get('resolve_resolution', '')),
+            'reassign': Text('reassign_owner',
+                             value =req.args.get('reassign_owner', req.authname),
+                             label ='to:'),
+            'accept': {
+                'label': 'accept ticket',
+            },
+            'reopen': {
+                'label': 'reopen ticket',
+            },
+        }
+        return controls[action]
+
+    def apply_ticket_action(self, req, ticket, action):
+        if action == 'accept':
+            ticket['status'] =  'assigned'
+            ticket['owner'] = req.authname
+        elif action == 'resolve':
+            ticket['status'] = 'closed'
+            ticket['resolution'] = req.args.get('resolve_resolution')
+        elif action == 'reassign':
+            ticket['owner'] = req.args.get('reassign_owner')
+            ticket['status'] = 'new'
+        elif action == 'reopen':
+            ticket['status'] = 'reopened'
+            ticket['resolution'] = ''
+        elif action != 'leave':
+            raise TracError('Invalid ticket action %s' % action)
+
+    def filter_ticket_fields(self, req, ticket, fields):
+        """ Filter ticket fields. """
+
+    def change_ticket_field(self, req, ticket, field):
+        """ Change a ticket field. """
+
+class TicketSystem(Component):
+    implements(IPermissionRequestor, IWikiSyntaxProvider, ISearchSource)
+
+    ticket_workflow = ExtensionPoint(ITicketWorkflow)
+
+    # Public API
+
+    def _get_workflow(self):
+        """ Get single workflow object for ticket actions. """
+        workflows = list(self.ticket_workflow)
+        workflow_name = self.env.config.get('ticket', 'workflow',
+                          'trac.ticket.api.defaultticketworkflow').lower()
+        if len(workflows) != 1:
+            for workflow in workflows:
+                if workflow_name.lower() == '.'.join([workflow.__module__,
+                        workflow.__class__.__name__]).lower():
+                    self.env.log.debug("Using ITicketWorkflow %s" %
+                                       workflow_name)
+                    return workflow
+            raise TracError('Could not load workflow plugin %s. Set the ' \
+                            'workflow option in the ticket section of' \
+                            'trca.ini to the name of the workflow to use.' \
+                            % workflow_name)
+
+        found = '.'.join([workflows[0].__module__,
+                workflows[0].__class__.__name__]).lower()
+        if found != workflow_name:
+            raise TracError('Configured workflow plugin is not enabled,' \
+                            'looking for %s, got %s.' % (workflow_name, found)) 
+        return workflows[0]
+    workflow = property(_get_workflow)
+
     def get_ticket_fields(self):
         """Returns the list of fields available for tickets."""
         from trac.ticket import model
@@ -48,11 +150,10 @@
 
         # Basic text fields
         for name in ('summary', 'reporter'):
-            field = {'name': name, 'type': 'text', 'label': name.title()}
-            fields.append(field)
+            fields.append(Text(name, label=name.title()))
 
         # Owner field, can be text or drop-down depending on configuration
-        field = {'name': 'owner', 'label': 'Owner'}
+        field = Field('owner', label='Owner')
         if self.config.getbool('ticket', 'restrict_owner'):
             field['type'] = 'select'
             users = []
@@ -65,8 +166,7 @@
         fields.append(field)
 
         # Description
-        fields.append({'name': 'description', 'type': 'textarea',
-                       'label': 'Description'})
+        fields.append(TextArea('description', label='Description'))
 
         # Default select and radio fields
         selects = [('type', model.Type), ('status', model.Status),
@@ -79,9 +179,9 @@
                 # Fields without possible values are treated as if they didn't
                 # exist
                 continue
-            field = {'name': name, 'type': 'select', 'label': name.title(),
-                     'value': self.config.get('ticket', 'default_' + name),
-                     'options': options}
+            field = Select(name, label=name.title(), 
+                     value=self.config.get('ticket', 'default_' + name),
+                     options=options)
             if name in ('status', 'resolution'):
                 field['type'] = 'radio'
             elif name in ('milestone', 'version'):
@@ -90,8 +190,7 @@
 
         # Advanced text fields
         for name in ('keywords', 'cc', ):
-            field = {'name': name, 'type': 'text', 'label': name.title()}
-            fields.append(field)
+            fields.append(Text(name, label=name.title()))
 
         custom_fields = self.get_custom_fields()
         for field in custom_fields:
@@ -104,13 +203,15 @@
         for name in [option for option, value
                      in self.config.options('ticket-custom')
                      if '.' not in option]:
-            field = {
-                'name': name,
-                'type': self.config.get('ticket-custom', name),
-                'order': int(self.config.get('ticket-custom', name + '.order', '0')),
-                'label': self.config.get('ticket-custom', name + '.label', ''),
-                'value': self.config.get('ticket-custom', name + '.value', '')
-            }
+            field = Field(name,
+                type=self.config.get('ticket-custom', name),
+                order=int(self.config.get('ticket-custom', name + '.order', '0')),
+                label=self.config.get('ticket-custom', name + '.label', ''),
+                value=self.config.get('ticket-custom', name + '.value', ''),
+                hidden= int(self.config.get('ticket-custom', name + '.hidden', '0')),
+                disabled=int(self.config.get('ticket-custom', name + '.disabled', '0')),
+                fullrow=int(self.config.get('ticket-custom', name + '.fullrow', '0')),
+            )
             if field['type'] == 'select' or field['type'] == 'radio':
                 options = self.config.get('ticket-custom', name + '.options')
                 field['options'] = [value.strip() for value in options.split('|')]
@@ -122,6 +223,17 @@
         fields.sort(lambda x, y: cmp(x['order'], y['order']))
         return fields
 
+    def add_custom_field(self, field):
+        """ Add a custom field from a trac.ticket.field.Field object. """
+        name = field['name']
+        for k, v in field.iteritems():
+            if k not in ('name', 'type') and v != '':
+                if k == 'options':
+                    v = '|'.join(v)
+                self.config.set('ticket-custom', '%s.%s' % (name, k), v)
+        self.config.set('ticket-custom', name, field['type'])
+        self.config.save()
+
     # IPermissionRequestor methods
 
     def get_permission_actions(self):
@@ -179,4 +291,4 @@
                    '#%d: %s' % (tid, util.shorten_line(summary)),
                    date, author,
                    shorten_result(desc, query.split()))
-            
+
=== trac/ticket/web_ui.py
==================================================================
--- trac/ticket/web_ui.py	(/mirror/trac)	(revision 2600)
+++ trac/ticket/web_ui.py	(/trac/workflow-only)	(local)
@@ -28,8 +28,8 @@
 from trac.web import IRequestHandler
 from trac.web.chrome import add_link, add_stylesheet, INavigationContributor
 from trac.wiki import wiki_to_html, wiki_to_oneliner
+from trac.ticket.field import *
 
-
 class NewticketModule(Component):
 
     implements(IEnvironmentSetupParticipant, INavigationContributor,
@@ -110,7 +110,7 @@
             del field['name']
             if name in ('summary', 'reporter', 'description', 'type', 'status',
                         'resolution'):
-                field['skip'] = True
+                field['hidden'] = True
             elif name == 'owner':
                 field['label'] = 'Assign to'
             elif name == 'milestone':
@@ -348,23 +348,12 @@
 
         # Do any action on the ticket?
         action = req.args.get('action')
-        actions = TicketSystem(self.env).get_available_actions(ticket, req.perm)
+        workflow = TicketSystem(self.env).workflow
+        actions = workflow.get_ticket_actions(req, ticket)
         if action not in actions:
             raise TracError('Invalid action')
 
-        # TODO: this should not be hard-coded like this
-        if action == 'accept':
-            ticket['status'] =  'assigned'
-            ticket['owner'] = req.authname
-        if action == 'resolve':
-            ticket['status'] = 'closed'
-            ticket['resolution'] = req.args.get('resolve_resolution')
-        elif action == 'reassign':
-            ticket['owner'] = req.args.get('reassign_owner')
-            ticket['status'] = 'new'
-        elif action == 'reopen':
-            ticket['status'] = 'reopened'
-            ticket['resolution'] = ''
+        workflow.apply_ticket_action(req, ticket, action)
 
         now = int(time.time())
         ticket.save_changes(req.args.get('author', req.authname),
@@ -399,7 +388,7 @@
             del field['name']
             if name in ('summary', 'reporter', 'description', 'type', 'status',
                         'resolution', 'owner'):
-                field['skip'] = True
+                field['hidden'] = True
             req.hdf['ticket.fields.' + name] = field
 
         req.hdf['ticket.reporter_id'] = reporter_id
@@ -445,6 +434,17 @@
                                                                      ticket.id)
 
         # Add the possible actions to hdf
-        actions = TicketSystem(self.env).get_available_actions(ticket, req.perm)
-        for action in actions:
-            req.hdf['ticket.actions.' + action] = '1'
+        import types
+        workflow = TicketSystem(self.env).workflow
+        actions = workflow.get_ticket_actions(req, ticket)
+        if actions != ['leave']:
+            ticket_actions = []
+            for action in actions:
+                controls = workflow.get_ticket_action_controls(req, ticket, action)
+                if isinstance(controls, Field):
+                    controls = {'controls': [controls]}
+                elif type(controls) is list:
+                    controls = {'controls': controls}
+                controls['action'] = action
+                ticket_actions.append(controls)
+            req.hdf['ticket.actions'] = ticket_actions
=== trac/ticket/field.py
==================================================================
--- trac/ticket/field.py	(/mirror/trac)	(revision 2600)
+++ trac/ticket/field.py	(/trac/workflow-only)	(local)
@@ -0,0 +1,79 @@
+# -*- coding: iso-8859-1 -*-
+#
+# Copyright (C) 2005 Edgewall Software
+# Copyright (C) 2005 Alec Thomas <alec@swapoff.org>
+# All rights reserved.
+#   
+# This software is licensed as described in the file COPYING, which
+# you should have received as part of this distribution. The terms
+# are also available at http://trac.edgewall.com/license.html.
+#       
+# This software consists of voluntary contributions made by many
+# individuals. For the exact contribution history, see the revision
+# history and logs, available at http://projects.edgewall.com/trac/.
+#       
+# Author: Alec Thomas <alec@swapoff.org>
+
+"""
+Ticket field wrappers. Pass these as HDF elements to the ClearSilver
+form_control() macro to get generic form controls.
+
+    eg. hdf['form.control.name'] = form.Text('name', label = 'Username:')
+
+Then in your template:
+
+    <?cs include:"macros.cs" ?>
+    <?cs call:form_control(form.control.name) ?>
+
+The 'syntax' of the elements is compatible with TracTicketsCustomFields.
+"""
+
+__all__ = [ 'Field', 'Text', 'CheckBox', 'Radio', 'TextArea', 'Select' ]
+
+class Field(dict):
+    """ Represents a ticket field control.
+
+            order	    Order in which fields appear.
+            hidden	    Do not display the field at all.
+            disabled	Disable modification of field.
+            fullrow	    If applicable, span two columns of the ticket
+                        properties.
+    """
+    def __init__(self, name, value='', order=0, hidden=0, label='', disabled=0,
+                 fullrow=0, type=None):
+        dict.__init__(self)
+        if type is None:
+            type = self.__class__.__name__.lower()
+        self.update({
+            'name': name,
+            'value': value,
+            'order': int(order),
+            'hidden': int(hidden),
+            'label': label,
+            'disabled': int(disabled),
+            'fullrow': int(fullrow),
+            'type': type,
+        })
+
+class Text(Field): pass
+
+class CheckBox(Field): pass
+
+class TextArea(Field):
+    def __init__(self, name, width=None, height=None, **kwargs):
+        Field.__init__(self, name, **kwargs)
+        if width is not None:
+            self['width'] = int(width)
+        if height is not None:
+            self['height'] = int(height)
+
+class Radio(Field):
+    def __init__(self, name, options=[], **kwargs):
+        Field.__init__(self, name, **kwargs)
+        self['options'] = options
+
+class Select(Field):
+    def __init__(self, name, options=[], optional=0, **kwargs):
+        Field.__init__(self, name, **kwargs)
+        self['options'] = options
+        self['optional'] = int(optional)

Property changes on: trac/ticket/field.py
___________________________________________________________________
Name: svk:merge
 +5349d9f9-240a-0410-8526-bdcfa9bb3cf4:/trac/workflow/trac/ticket/field.py:2575


Property changes on: 
___________________________________________________________________
Name: svk:merge
  8537732e-d8ef-0310-9407-9991635669ee:/trac-local/trunk:3673
  8537732e-d8ef-0310-9407-9991635669ee:/trac-local/trunk-fastcgi:1014
  89e4328e-11e8-0310-811a-b3a06f405a76:/trac:6844
 +af82e41b-90c4-0310-8c96-b1721e28e2e2:/trunk:2771
  ecde85df-87dc-0310-ab16-a9b1c1177255:/local/trac/trunk:796

