= Trac报告 =
[[ZhTracGuideToc]]

to present information about tickets in the Trac database.
Trac报告模块提供了一个简单但强大的报告设施，介绍关于Trac数据库中的传票的信息。

Trac报告没有自己的报告定义格式，依靠标准的SQL“SELECT”参数来自定义报告的定义。

  “注意：报告模式在现有的形式中会渐渐淘汰，因为它严重限制了Trac团队调整潜在数据库模式的能力。我们相信[wiki:ZhTracQuery query module]是个好的替代品，可以提供更灵活和更好的功能。有一些报告还不能用查询模式来处理，我们打算进一步加强它，这样报告模式可以完全删除掉。也意味着报告模式不再有增强。”

  “你可以通过禁止[wiki:ZhTracIni trac.ini]中的前者，用查询模式来替代报告模式。”
  {{{
  [components]
  trac.ticket.report.* = disabled
  }}}
  “它会使查询模式成为“查看传票”导航的默认处理器。我们鼓励你尝试该配置并报告返回你缺少哪种报告的特征。”

包含下列基本部分的一个报告：
 * '''ID''' -- 唯一的识别符
 * '''标题'''  -- 描述性的标题
 * '''描述'''  -- 以ZhWikiFormatting为格式，一个报告的简要描述。
 * '''报告正文''' --报告查询的结果列比爱，格式参照下列描述的方法。
 * '''页脚''' -- 连接到该报告的下载格式。

== 改变排序顺序 ==
简单的报告，可通过单击列表，按列进行排序。

如果一个列标题使是一个链接（红色的），单击你想要排序的列。再次点击同样的标题反转顺序。

== 可选的下载格式 ==
除了默认的HTML视图，报告还可以许多替代格式的形式导出。再报告网页的底部，你会发现一个现有数据格式的列表。单击想要的
链接，下载一个报告格式。

=== 逗号分隔的 - CSV (逗号分隔的值) ===

报告导出为纯文本，每列用逗号分隔开。
“注意” 回车，换行和逗号从列数据中抽离出来，来保存CSV结构。

=== Tab分隔的 ===
像上述的一样，但是用tab而不是逗号。

=== RSS - XML Content Syndication ===
所有的报告支持通过XML/RSS 2.0进行联合。要订阅RSS，单击页面底部的橙色“XML”图标。想知道Trac中RSS支持的总说明，请参见TracRss。

----

== 创建自定义报告 ==

“创建一份自定义报告要求对SQL足够了解。”

一个报告基本上是一个独立命名的SQL查询，由Trac执行和演示。报告可以从网络界面中的一个
自定义SQL表述直接查看和创建。

一个报告包含一个“传票”表格中的SELECT表达式，使用现有的列并按你的想法进行排序。

== 传票的列 ==
传票表格有下列列：
 * id
 * time
 * changetime
 * component
 * severity  
 * priority 
 * owner
 * reporter
 * cc
 * version
 * milestone
 * status
 * resolution
 * summary
 * description

关于列字段的详细描述，请见ZhTracTickets。

“所有的活动传票，按照优先级和时间进行排序。”

“例子” “所有的活动传票，按照优先级和时间进行排序。”
{{{
SELECT id AS ticket, status, severity, priority, owner, 
       time as created, summary FROM ticket 
  WHERE status IN ('new', 'assigned', 'reopened')
  ORDER BY priority, time
}}}


----


== 高级报告: 动态变量 ==
Trac支持再报告SQL陈述中使用“动态变量”。简而言之，动态变量是进行查询前被自定义数据替换的“特殊”字符串。

=== 在查询中使用变量 ===
动态变量的语法是很简单的，任何以'$'为开头的大写字母都被当作一个变量。

Example:
{{{
SELECT id AS ticket,summary FROM ticket WHERE priority='$PRIORITY'
}}}

看报告时，为$PRIORITY指定一个值，你必须将其定义为报告URL中的一个参数，不考虑开头的'$'符号。

Example:
{{{
 http://projects.edgewall.com/trac/reports/14?PRIORITY=high
}}}

要使用多个变量，用'&进行分隔。

Example:
{{{
 http://projects.edgewall.com/trac/reports/14?PRIORITY=high&SEVERITY=critical
}}}


=== 特殊变量或常量 ===
“有魔力的”动态变量的值可以自动设置不需要更改URL.

 * $USER -- Username of logged in user.

Example (''List all tickets assigned to me''):
{{{
SELECT id AS ticket,summary FROM ticket WHERE owner='$USER'
}}}


----


== 高级报告: 自定义格式 ==
Trac还可以进行更高级的报告，包括自定义版式，结果分组和用户自定义CSS样式。要创建
这样的报告，我们要用专门的SQL陈述来控制Trac报告引擎的输出。

== 特殊列 ==
要格式化报告，ZhTracReport在查询结果中寻找“魔力”列名。这些“魔力”名称处理过，并影响
最终报告的版式和样式。

=== 自动格式化的列 ===
 * '''传票''' -- 传票ID号，作为该传票的链接。
 * '''created, modified, date, time''' -- 将单元格的格式变为日期或时间格式。
 * '''描述''' -- 传票的描述，在wiki引擎中分解。
 
'''例子:'''
{{{
SELECT id as ticket, created, status, summary FROM ticket 
}}}

=== 自定义格式列 ===
名字的开头和结尾是两个下划线的列，例如__color__，应该是“格式提示”，影响了行的样子。
 
 * '''`__group__`''' -- 将结果按照值的大小在该列中进行分组。每一组都有他们自己的标题和表格。
 * '''`__color__`''' -- 从1到5的值中选择一个定义好的颜色。一旦按照事情的优先级对行使用颜色。
 * '''`__style__`''' -- 用于该行的一个自定义CSS样式表达式。

'''例子:''' ''列举活动传票，按照里程碑进行分组，按照优先级进行着色。''
{{{
SELECT p.value AS __color__,
     t.milestone AS __group__,
     (CASE owner WHEN 'daniel' THEN 'font-weight: bold; background: red;' ELSE '' END) AS __style__,
       t.id AS ticket, summary
  FROM ticket t,enum p
  WHERE t.status IN ('new', 'assigned', 'reopened') 
    AND p.name=t.priority AND p.type='priority'
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}


“注意：” 一个表格链接用来和他们''enum''表格中的数字表达法来匹配“传票”优先级。

=== 改变报告的行的版式 ===
默认情况下，每行的所有列都显示在HTML报告的一行中，格式可能会按照上面的描述。然而，
也可以创建多行的报表项。

 * '''`column_`''' -- ''在其之后分行''。通过向列名中添加一个下划线('_')，剩下的列会在的第二行继续。
 * '''`_column_`''' -- ''整行''。通过在列名的开头和结尾添加一个下划线('_')，数据会显示在单独的一行。
 * '''`_column`'''  --  ''隐藏数据''。给一个列名添加一个下划线('_')，指导Trac隐藏HTML输出的内容。它只对用其他格式下载的明显的信息有用。这些格式包括CSV或 RSS/XML。
'''例子:''' “列举活动传票，按里程碑进行分组，按优先级进行着色，还有描述以及多行版式。”

{{{
SELECT p.value AS __color__,
       t.milestone AS __group__,
       (CASE owner 
          WHEN 'daniel' THEN 'font-weight: bold; background: red;' 
          ELSE '' END) AS __style__,
       t.id AS ticket, summary AS summary_,             -- ## Break line here
       component,version, severity, milestone, status, owner,
       time AS created, changetime AS modified,         -- ## Dates are formatted
       description AS _description_,                    -- ## Uses a full row
       changetime AS _changetime, reporter AS _reporter -- ## Hidden from HTML output
  FROM ticket t,enum p
  WHERE t.status IN ('new', 'assigned', 'reopened') 
    AND p.name=t.priority AND p.type='priority'
  ORDER BY t.milestone, p.value, t.severity, t.time
}}}

=== 关于自定义域的报告 ===

如果你向你的传票中添加自定义域（0.8版本中的实验性的特征，参见ZhTracTicketsCustomFields），你可以写一个SQL查询来覆盖他们。你还需要在ticket_custom表格中制造一个连接符，但不是特别简单。

如果宣布trac.ini中的额外字段之前，你在数据库中有传票，那么在ticket_custom表格中没有相关的数据。要绕开这个问题，可使用SQL的"LEFT OUTER JOIN"语句。参见ZhTracIniReportCustomFieldSample中的一些例子。

----
相关信息：ZhTracTickets, ZhTracQuery, ZhTracGuide
