=  维基宏 =
Trac宏是用Python写的自定义函数扩展Trac引擎和的插件。宏在任何支持ZhWikiFormatting的环境种插入动态的HTML数据。

另一种宏是Wiki处理器。他们一般处理交替的标示格式和大块区域的信息的显示（就像源代码的高亮显示一样）。

== 使用宏 ==
宏的调用是放在两个“方括号”中。像Python函数一样，宏可以有参数和括号内用逗号分隔的列表。

=== 例子 ===

{{{
 [[Timestamp]]
}}}
Display:
 [[Timestamp]]

{{{
 [[HelloWorld(Testing)]]
}}}
Display:
 [[HelloWorld(Testing)]]

== 现有的宏 ==

“注意，如果你还没有激活`-OO`优化或设置[wiki:TracModPython mod_python]的PythonOptimize`选项，下面的列表将只包括宏文档。”
[[MacroList]]

== 全世界的Macros ==

[http://trac-hacks.org/ Trac Hacks]网站提供了广泛收集的宏以及Trac社区贡献的其他Trac[TracPlugins plugins。如果你要寻找新的宏，或者写了一个你想和全世界的人一起分享的宏，请不要犹豫马上访问该网站。

== 开发自定义宏 ==
宏，像Trac本身，是在[http://www.python.org/ Python programming language]中写的。他们是很简单的模型，通过文件名来识别并且包含了一个`execute()`函数。Trac会显示插入到调用宏的Wiki网页的HTML显示（representation）的回归数据。

学习一个例子，是最简单的方法：
{{{
#!python
# MyMacro.py -- The world's simplest macro

def execute(hdf, args, env):
    return "Hello World called with args: %s" % args
}}}

你还可以使用环境对象，比如说，去访问配置数据和数据库，例如：
{{{
#!python
def execute(hdf, txt, env):
    return env.config.get('trac', 'repository_dir')
}}}

注意，0.9版本后，Wiki宏还可被写为Trac插件（Plugins）。这样就给了这些宏“经典”宏没有的能力，例如可以直接访问HTTP请求。

关于开发宏的更多信息，请见主项目网站上的[http://projects.edgewall.com/trac/wiki/TracDev development resources]。

----
相关信息：ZhWikiProcessors, ZhWikiFormatting, ZhTracGuide
