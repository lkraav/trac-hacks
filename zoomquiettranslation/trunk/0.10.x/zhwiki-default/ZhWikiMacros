=  Wiki宏 =
Trac宏是用Python写的自定义函数, 用以扩展Trac引擎功能的插件. 宏可在任何支持[ZhWikiFormatting Wiki格式]的环境中插入动态的HTML数据.

另一种宏是Wiki处理器. 他们一般处理替代的标记格式和大块区域信息的显示(就像源代码的高亮显示一样).

== 使用宏 ==

宏的调用是放在两个'''方括号'''中. 像Python函数一样, 宏可以有参数(括号内用逗号分隔的列表).

=== 例子 ===

{{{
 [[Timestamp]]
}}}
显示:
 [[Timestamp]]

{{{
 [[HelloWorld(Testing)]]
}}}
显示:
 [[HelloWorld(Testing)]]

== 可用的宏 ==

''注意, 如果你没有启用`-OO`优化或设置[wiki:TracModPython mod_python]的!PythonOptimize选项, 下面的列表将只包括宏文档.''
[[MacroList]]

== 来自世界各地的宏 ==

[http://trac-hacks.org/ Trac Hacks]网站汇集了丰富的宏,以及Trac社区贡献的其他[TracPlugins Trac插件]. 如果你要找新的宏, 或写了一个想和全世界分享的宏, 请不要犹豫马上访问该网站.

== 开发自定义宏 ==
宏, 像Trac本身, 是用[http://www.python.org/ Python编程语言]写的. 他们是很简单的模块, 通过文件名来标识, 并且只包含了一个`execute()`函数. Trac会在宏被调用的地方, 在wiki页面的HTML表示中插入宏的返回值.

最简单的方法是学习一个例子:
{{{
#!python
# MyMacro.py -- The world's simplest macro

def execute(hdf, args, env):
    return "Hello World called with args: %s" % args
}}}

你还可以使用环境(env)对象, 比如说, 去访问配置数据和数据库, 例如:
{{{
#!python
def execute(hdf, txt, env):
    return env.config.get('trac', 'repository_dir')
}}}

注意, 0.9版本后, Wiki宏还可作为Trac插件(Plugins)来写. 这样就给了这些宏一些''经典''宏没有的能力, 例如可以直接访问HTTP请求.

关于开发宏的更多信息, 请见主项目网站上的[http://projects.edgewall.com/trac/wiki/TracDev development resources].

----

原文版本: WikiMacros[[BR]]
相关信息: [ZhWikiProcessors Wiki解析器], [ZhWikiFormatting Wiki格式], [ZhTracGuide Trac导览][[BR]]
See also: WikiProcessors, WikiFormatting, TracGuide
