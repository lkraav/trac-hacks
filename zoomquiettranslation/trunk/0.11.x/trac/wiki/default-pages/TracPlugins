= Trac插件 =
[[ZhTracGuideToc]]

自0.9后, Trac支持插件来扩展内置功能. 插件的功能是基于[http://trac.edgewall.org/wiki/TracDev/ComponentArchitecture 组件架构]的.

== 要求 ==

要在Trac中使用基于egg的插件, 你需要安装[http://peak.telecommunity.com/DevCenter/setuptools setuptools](version 0.6).

要安装`setuptools`, 下载bootstrap模块[http://peak.telecommunity.com/dist/ez_setup.py ez_setup.py], 并执行:
{{{
$ python ez_setup.py
}}}

如果脚本不能安装setuptools版本, 你可以从[http://www.python.org/pypi/setuptools PyPI]上下载它, 然后手动安装.

Plugins can also consist of a single `.py` file dropped into either the environment or global `plugins` directory ''(since [milestone:0.10])''.

== Installing a Trac Plugin ==

=== 单独项目 ===

插件打包成[http://peak.telecommunity.com/DevCenter/PythonEggs Python eggs]. 意味着, 他们是ZIP文件, 文件扩展名是`.egg`. 如果你已下载了一个插件的源代码, 你可以运行:

If you have downloaded a source distribution of a plugin, and want to build the `.egg` file, follow this instruction:
 * Unpack the source. It should provide a setup.py. 
 * Run:
{{{
$ python setup.py bdist_egg
}}}

Then you will have a *.egg file. Examine the output of running python to find where this was created.

一旦你有插件文件, 你需要将其复制到[wiki:ZhTracEnvironment Trac环境]的''plugins''目录, 并且确认Web服务器有足够的权限来读取插件egg.

注意, 创建了egg的Python版本必须匹配运行Trac的Python版本. 比如, 你在Python2.3下运行Trac, 但已将你的独立Python升级到2.4, eggs就不被识别了.

=== 用于所有项目 ===

==== 用.egg文件 ====

一些插件, 例如[http://trac.edgewall.org/wiki/WebAdmin WebAdmin], 可以作为`.egg`文件进行下载, 可以和`easy_install`程序一起安装:
{{{
easy_install TracSpamFilter
}}}

如果`easy_install`不在你的系统上, 请参考上节中的''要求''来安装. Windows用户还需要将Python安装包的''Scripts''目录, 例如`C:\Python23\Scripts`, 添加到`PATH`环境变量中. 更多信息, 请参考[http://peak.telecommunity.com/DevCenter/EasyInstall#windows-notes easy_install Windows说明].

如果安装完一个egg后, Trac报告权限错误, 而你不想为Web服务器提供一个可写的egg缓存目录, 你只需解压这个egg来绕开这个问题. 使用`--always-unzip`选项:
{{{
easy_install --always-unzip TracSpamFilter-0.2.1dev_r5943-py2.4.egg
}}}

你应该用与egg相同的名字作为目录名(包括结尾的`.egg`), 目录中是解压后的内容.

Trac也会搜索`$prefix/share/trac/plugins`目录下的全局安装的插件(自0.10版本后).
==== From source ====

`easy_install` makes installing from source a snap. Just give it the URL to either a Subversion repository or a tarball/zip of the source:
{{{
easy_install http://svn.edgewall.com/repos/trac/sandbox/spam-filter
}}}

==== 启用插件 ====

不像只安装在环境目录中的那些插件, 你需要通过[wiki:ZhTracIni trac.ini]来启用全局安装的插件. 这是在配置文件的`[components]`段中完成的, 例如:
{{{
[components]
tracspamfilter.* = enabled
}}}

选项名是插件的Python安装包. 插件的相应文档中应该明确指定, 但通过查看源代码轻易找到(找包含__init__.py的顶级目录).

注意:安装完插件后, 你还需要重启Apache.

== 创建插件缓存 ==

一些插件需要被Python egg的运行时(`pkg_resources`)提取出来, 因此他们的内容是文件系统上的真实文件. 提取的目录默认是用户的home目录, 这可能是也可能不是个问题. 但你可以用环境变量`PYTHON_EGG_CACHE`覆盖默认位置.

要在Apache实现, 如下使用`SetEnv`指令:
{{{
SetEnv PYTHON_EGG_CACHE /path/to/dir
}}}

无论你使用[wiki:ZhTracCgi CGI]或[wiki:ZhTracModPython mod_python]前端, 该指令都起作用. 将该指令放在你设置[wiki:ZhTracEnvironment Trac环境]路径的旁边, 也就是说, 在同一个`<Location>`块内.

例子 (对于CGI):
{{{
 <Location /trac>
   SetEnv TRAC_ENV /path/to/projenv
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

或者(对于mod_python):
{{{
 <Location /trac>
   SetHandler mod_python
   ...
   SetEnv PYTHON_EGG_CACHE /path/to/dir
 </Location>
}}}

 ''注意: 这要求`mod_env`模块''

对于[wiki:ZhTracFastCgi FastCGI], 你需要''-initial-env''选项, 或你的Web服务器提供的环境变量设置.

 ''Note: that if you already use -initial-env to set the project directory for either a single project or parent you will need to add atleast one environment variable inside trac.fcgi as expressed in the example on [wiki:TracFastCgi TracFastCgi].

=== About hook scripts ===

如果你创建了调用Trac引擎的SVN hook脚本(例如`/contrib`目录中提供的post-commit hook脚本), 确保你在这些脚本中也定义了`PYTHON_EGG_CACHE`环境变量.

== 疑难解答 ==

=== 安装工具安装好了吗? ===

从命令行试试:
{{{
$ python -c "import pkg_resources"
}}}

如果你没有得到输出, 则是安装好的. 否则, 你需要先安装它.

=== 你得到Python egg的正确版本了吗? ===

Python egges在他们的文件名中包含了Python的版本号. 例如, `MyPlugin-1.0-py2.4.egg`是一个Python2.4的egg, 如果你在运行一个不同的Python版本, 比如说2.3或2.5, 它无法被加载进来.

还有, 验证你下载的egg文件实际是一个ZIP文件. 如果你从一个Trac网站上下载的它, 你可能只是下载了一个HTML的预览网页.

=== 插件启用了吗? ===

如果你安装了一个全局插件(即: 不是在Trac项目环境的''plugins''目录中), 你需要在[ZhTracIni trac.ini]中启用它. 确认以下几个事情:
 * you actually added the necessary line(s) to the `[components]` section
 * the package/module names are correct
 * the value is “enabled", not e.g. “enable”

 
=== 查看egg文件的权限 ===

Trac当然必须能够读取文件. 当然, 你肯定知道!

=== 查看日志文件 ===

启用Trac中的[ZhTracLogging 日志], 设置日志等级为`DEBUG`, 然后查看日志中关于加载插件的信息.

=== Verify you have proper permissions ===

Some plugins require you have special permissions in order to use them. WebAdmin, for example, requires the user to have TRAC_ADMIN permissions for it to show up on the navigation bar.

=== Is the wrong version of the plugin loading? ===

If you put your plugins inside plugins directories, and certainly if you have more than one project, you need to make sure that the correct version of the plugin is loading. Here are som basic rules:
 * Only one version of the plugin can be loaded for each running Trac server (ie. each Python process). The Python namespaces and module list will be shared, and it cannot handle duplicates. Whether a plugin is `enabled` or `disabled` makes no difference.
 * A globally installed plugin (typically `setup.py install`) will override any version in global or project plugins directories. A plugin from the global plugins directory will be located before any project plugins directory.
 * If your Trac server hosts more than one project (as with `TRAC_ENV_PARENT_DIR` setups), then having two versions of a plugin in two different projects will give uncertain results. Only one of them will load, and the one loaded will be shared by both projects. Trac will load the first found - basically from the project that receives the first request.
 * Having more than one version listed inside Python site-packages is fine (ie. installed with `setup.py install`) - setuptools will make sure you get the version installed most recently. However, don't store more than one version inside a global or project plugins directory - neither version number nor installed date will matter at all. There is no way to determine which one will be located first when Trac searches the directory for plugins.

=== If all of the above failed ===

OK, so the logs don't mention plugins, the egg is readable, the python version is correct ''and'' the egg has been installed globally (and is enabled in the trac.ini) and it still doesn't work or give any error messages or any other indication as to why? Hop on the IrcChannel and ask away.

----
原文版本: TracPlugins[[BR]]
相关信息: [ZhTracGuide Trac导览], [http://trac.edgewall.org/wiki/PluginList 插件列表], [http://trac.edgewall.org/wiki/TracDev/ComponentArchitecture 组件架构][[BR]]
See also: TracGuide, [http://trac.edgewall.org/wiki/PluginList plugin list], [http://trac.edgewall.org/wiki/TracDev/ComponentArchitecture component architecture]
